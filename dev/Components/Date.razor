@using FateExplorer.Calendar
@using FateExplorer.GameData
@using FateExplorer.ViewModel

@inject IGameDataService GameData
@inject IStringLocalizer<App> l10n

<MudTooltip Text=@LongDate>
    <MudChip Label=true Variant=Variant.Filled Color=Color.Primary Class="ml-4 rounded-0"
             Icon=@Calendar.MonthIcon
             OnClick=@(() => IsPopupOpen = !IsPopupOpen)>
             @RenderShortDate(Calendar)
    </MudChip>
</MudTooltip>

<MudPopover Open=@IsPopupOpen Fixed=true Class="px-4 pt-4" AnchorOrigin=Origin.BottomCenter TransformOrigin=Origin.TopCenter>
    <MudGrid>
        <MudItem sm=12 md=6>
            <MudCard Outlined=true>
                <MudCardContent Class="d-flex flex-column justify-center">
                    <MudPaper Class="d-flex pa-21 justify-center" Elevation=0 Width="100%">
                        <MudText Typo=Typo.body2>@Calendar.Month (@Calendar.MonthNr)</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex justify-center align-center mx-auto pa-10 mud-theme-primary" Width="64px" Height="64px">
                        <MudIconButton OnClick=@Calendar.GotoYesterday Icon=@Icons.Material.Sharp.ArrowBackIos />
                        <MudText Class="px-5" Typo=Typo.h3>@Calendar.DayOfMonth</MudText>
                        <MudIconButton OnClick=@Calendar.GotoTomorrow Icon=@Icons.Material.Sharp.ArrowForwardIos />
                    </MudPaper>
                    <MudPaper Class="d-flex pa-2 justify-center" Elevation=0 Width="100%">
                        <MudText Typo=Typo.body2>@Calendar.Weekday</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex pa-2 justify-center" Elevation=0 Width="100%">
                        <MudText Typo=Typo.body2>@Calendar.Year @Calendar.Reckoning</MudText>
                    </MudPaper>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick=@SetDate Variant=Variant.Text Color=Color.Primary>@BtnLabelSetDate</MudButton>
                    <MudButton OnClick=@Calendar.GotoEarthDate  Variant=Variant.Text>@l10n["btnSetEarthDate"]</MudButton>
                </MudCardActions>
            </MudCard>
            <MudInput T=string Mask=@(new RegexMask(CalendarViMo.DateRegex)) @bind-Value=dateInputStr
                Placeholder="tt Monat yyyy BF" Class=@DateOpenClass />
        </MudItem>
        <MudItem sm=12 md=6>
            <MudText></MudText>
            <MudSimpleTable Elevation=0>
                <tbody>
                <tr>
                    <td><MudIcon Icon=@Calendar.SeasonIcon Title=@Calendar.Season /> </td>
                    <td>@l10n["lblSeason"] Jahreszeit</td>
                    <td>@Calendar.Season</td>
                </tr>
                <tr>
                    <td>
                        <MudIcon Icon=@Icons.Material.Sharp.CalendarToday Title="Regular day" /> 
                        @*<MudIcon Icon=@Icons.Material.Sharp.Cake Title="Holidy" />*@
                    </td>
                    <td>@l10n["lblHoliday"] Feiertag</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td><MudIcon Icon=@Calendar.MoonPhaseIcon Title=@Calendar.MoonPhaseName /> </td>
                    <td>@l10n["lblMoonPhase"] Mondphase</td>
                    <td>@Calendar.MoonPhaseName</td>
                </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>
    <div class="d-flex flex-column">
        <MudButton OnClick=@ToggleOpen Class="ml-auto mr-n3 mb-1" Color=Color.Primary>@l10n["btnClose"]</MudButton>
    </div>
</MudPopover>

@code {
    private CalendarViMo Calendar { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Calendar = new(GameData.Calendar);
    }


    // 
    #region POPOVER
    public bool IsPopupOpen;

    public void ToggleOpen()
    {
        if (IsPopupOpen)
            IsPopupOpen = false;
        else
            IsPopupOpen = true;
    }



    private const string BtnLabelSetDateSet = "btnSetDate";
    private const string BtnLabelSetDateConfirm = "btnSetDateConfirm";
    private string BtnLabelSetDate { get; set; } = BtnLabelSetDateSet;
    private bool SetDateOpen = false;
    private string DateOpenClass => SetDateOpen ? "" : "d-none";
    private string dateInputStr = string.Empty;


    private void SetDate()
    {
        if (!SetDateOpen)
        {
            dateInputStr = $"{Calendar?.DayOfMonth}. {Calendar?.Month} {Calendar?.Year} BF";
            SetDateOpen = true;
            BtnLabelSetDate = l10n[BtnLabelSetDateConfirm];
        }
        else
        {
            DateTime ParseSuccess = DateTime.MinValue;
            if (!string.IsNullOrWhiteSpace(dateInputStr))
            {
                try
                {
                    ParseSuccess = Calendar.Parse(dateInputStr);
                }
                catch (Exception) { };
            }
            if (ParseSuccess != DateTime.MinValue)
            {
                Calendar.GotoDate(ParseSuccess);
                SetDateOpen = false;
                BtnLabelSetDate = l10n[BtnLabelSetDateSet];
            }
        }
}

    #endregion


    #region RENDERING
    RenderFragment<CalendarViMo> RenderShortDate = Value => __builder =>
    {
        <span>@($"{Value.DayOfMonth}, {Value.Weekday}")</span>
    };

    private string LongDate => $"{Calendar?.Weekday}, der {Calendar?.DayOfMonth}. {Calendar?.Month} {Calendar?.Year}";


    #endregion
}
