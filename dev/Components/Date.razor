@using FateExplorer.Calendar
@using FateExplorer.GameData
@using FateExplorer.ViewModel

@inject IGameDataService GameData
@inject IDateOfPlay CurrentDate
@inject IStringLocalizer<App> l10n
@inject IDialogService Dialog

<MudTooltip Text=@LongDate>
    <MudChip T=bool Label=true Variant=Variant.Filled Color=Color.Primary Class="ml-4 rounded-0"
             Icon=@Calendar.MonthIcon
             OnClick=ToggleOpen Disabled=Disabled>
             @RenderShortDate(Calendar)
    </MudChip>
</MudTooltip>

<MudPopover Open=@Open Fixed=true Class="datepop px-4 pt-4" AnchorOrigin=Origin.BottomCenter TransformOrigin=Origin.TopCenter Style="max-width: 800px"
            @onkeyup=HandleKeyUp>
<MudFocusTrap>
    <div class="d-flex flex-row">
        <MudSpacer/><MudIconButton Icon=@Icons.Material.Filled.Close OnClick=@ToggleOpen />
    </div>
    <MudGrid Class="pb-4">
        <MudItem xs=12 md=6>
            <MudCard Outlined=true>
                <MudCardContent Class="d-flex flex-column justify-center">
                    @* Week Day *@
                    <MudPaper Class="d-flex pa-2 justify-center" Elevation=0 Width="100%">
                        <MudText Typo=Typo.body2>@Calendar.Weekday</MudText>
                    </MudPaper>
                    @* Current Day *@
                    <div class="d-flex justify-space-between align-center flex-grow-1 gap-4 my-1">
                        <MudIconButton OnClick=@Calendar.GotoYesterday aria-label=@l10n["btnPreviousDay"]
                            Size=Size.Large Icon=@Icons.Material.Sharp.ArrowBackIos />
                        <MudPaper Class="d-flex justify-center align-center mx-auto pa-10 flex-grow-1 mud-theme-primary" Height="64px">
                            @*Width="64px"*@
                            <MudText Class="px-5" Typo=Typo.h3>@Calendar.DayOfMonth</MudText>
                        </MudPaper>
                        <MudIconButton OnClick=@Calendar.GotoTomorrow aria-label=@l10n["btnNextDay"]
                            Icon=@Icons.Material.Sharp.ArrowForwardIos Size=Size.Large />
                    </div>
                    @* Month *@
                    <MudPaper Class="d-flex px-auto justify-center py-2" Elevation=0>
                        <MudText Typo=Typo.body2>@Calendar.Month (@Calendar.MonthNr)</MudText>
                    </MudPaper>
                    @* Year *@
                    <MudPaper Class="d-flex pa-2 justify-center" Elevation=0 Width="100%">
                        <MudText Typo=Typo.body2>@Calendar.Year @Calendar.Reckoning</MudText>
                    </MudPaper>
                </MudCardContent>

                <MudCardActions Class="d-block">
                    <MudButton OnClick=@SetDate Variant=Variant.Text Color=Color.Primary>@BtnLabelSetDate</MudButton>
                    <MudButton OnClick=@Calendar.GotoEarthDate Variant=Variant.Text>@l10n["btnSetEarthDate"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs=12 md=6>
            <MudPaper Elevation=0 Outlined=true Class="d-flex flex-nowrap">
            <MudSimpleTable Elevation=0>
                    <tbody>
                <tr>
                    <td><MudIcon Icon=@Calendar.SeasonIcon Title=@Calendar.Season /> </td>
                    <td>@l10n["lblSeason"]</td>
                    <td width="200px">@Calendar.Season</td>
                </tr>
                <tr>
                    <td><MudIcon Icon=@Calendar.MoonPhaseIcon Title=@Calendar.MoonPhaseName /> </td>
                    <td>@l10n["lblMoonPhase"]</td>
                    <td>@Calendar.MoonPhaseName</td>
                </tr>
                @{var holidays = Calendar.GetHolidays();}
                @if (holidays.Count() > 0)
                {
                    <tr>
                        <td class="holidaycell">
                            <MudIcon Icon=@Icons.Material.Sharp.CalendarToday Title=@l10n["lblHoliday"] /> 
                        </td>
                        <td colspan="2">
                            <MudText>@l10n["lblHoliday"]</MudText>
                            @{
                                var Holidays = Calendar.GetHolidays();
                                if (Holidays.Length > 0)
                                {
                                <MudExpansionPanels Class="holidays" Dense=true Gutters=false Outlined=false Elevation=0>
                                    @foreach (var h in Holidays)
                                    {
                                        @if (string.IsNullOrWhiteSpace(h.Item2)) 
                                        {
                                        <MudExpansionPanel Class="holiday" HideIcon=true>
                                            <TitleContent>@h.Item1</TitleContent>
                                        </MudExpansionPanel>
                                        }
                                        else
                                        {
                                        <MudExpansionPanel Class="holiday">
                                            <TitleContent>@h.Item1</TitleContent>
                                            <ChildContent><p>@h.Item2</p></ChildContent>
                                        </MudExpansionPanel>
                                        }
                                    }
                                </MudExpansionPanels>
                                }
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudFocusTrap>
</MudPopover>


@code {
    private CalendarViMo Calendar { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Calendar = new(GameData.Calendar, CurrentDate);
        BtnLabelSetDate = l10n[BtnLabelSetDateSet];
    }


    /* 
    * POPOVER
    */
    #region POPOVER ====

    /// <summary>
    /// Determines whether the popup is open or closed.
    /// </summary>
    [Parameter] public bool Open { get; set; }

    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    /// <summary>
    /// Determines whether the button to open / close the popup is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    [Parameter] public EventCallback<bool> DisabledChanged { get; set; }


    public void ToggleOpen()
    {
        Open = !Open;
        OpenChanged.InvokeAsync(Open);
    }


    /// <summary>
    /// Handle keyboard events
    /// </summary>
    /// <param name="e"></param>
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == KeyCode.Escape)
        {
            Open = false;
            OpenChanged.InvokeAsync(Open);
        }
    }


    // SET DATE Button
    private const string BtnLabelSetDateSet = "btnSetDate";
    private const string BtnLabelSetDateConfirm = "btnSetDateConfirm";
    private string BtnLabelSetDate { get; set; }



    /// <summary>
    /// Respond to a click of the Modify Date button
    /// </summary>
    private async Task SetDate()
    {
        DialogParameters parameters = new() 
        { 
            { "Calendar", Calendar },
            { "Date", Calendar.EffectiveDate }
        };
        var dialog = await Dialog.ShowAsync<DateEditor>(l10n["lblEditDate"], parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Calendar.GotoDate((DateTime)result.Data);
        }
    }



    #endregion


    /*
     * RENDERING
     */
    #region RENDERING ====

    RenderFragment<CalendarViMo> RenderShortDate = Value => __builder =>
    {
    <span>@Value.DateToString('x')</span>
    };

    private string LongDate => Calendar?.DateToString('D') ?? "";


    #endregion
}
