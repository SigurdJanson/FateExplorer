@using FateExplorer.ViewModel
@inject IStringLocalizer<App> l10n


<MudCard Class="mb-4" Outlined=BareHand Elevation=@(BareHand ? 0 : 3)>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=Typo.body2 GutterBottom=false Color=Color.Secondary>@l10n["lblDominantHand"]</MudText>
            <MudText Typo=Typo.body1 GutterBottom=false>@Weapon.Name</MudText>
            <MudText Typo=Typo.body2 GutterBottom=false>@CarriedWeaponProps(Weapon, WhichHand) @WeaponRanges()</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (!BareHand)
            {
            <MudIconButton Icon=@Icons.Material.Sharp.Close Color=Color.Default  
                OnClick=StashWeapon/>  @*StashWeapon(true)*@
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardActions> @*OnAttackCheck(Weapon, WhichHand == HandsViMo.Hand.Main)*@
        <MudIconButton Color=Color.Dark Icon=@IconsFE.Sword
            OnClick=OnAttackCheck
            Disabled=HeroHands.IsDisabled(WhichHand)
            Title=@TitleAttack aria-label=@AriaAttack />
        @if (Weapon.CanParry)
        { @*OnParryCheck(Weapon, WhichHand == HandsViMo.Hand.Main))*@
        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Shield
            OnClick=OnParryCheck
            Disabled=HeroHands.IsDisabled(WhichHand)
            Title=@TitleParry aria-label=@AriaParry />
        }
@*      <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
            Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Main)
            Title=@(l10n["lblView"]) aria-label=@(l10n["lblView"]) />*@
    </MudCardActions>
</MudCard>



@code {
    /// <summary>
    /// Both hands of the character
    /// </summary>
    [Parameter] public HandsViMo HeroHands { get; set; }

    /// <summary>
    /// Which of the hands does thi component represent? Main or off-hand?
    /// </summary>
    [Parameter] public HandsViMo.Hand WhichHand  { get; set; }

    /// <summary>
    /// Does the character carry a weapon or fight with bare hands?
    /// </summary>
    [Parameter] public bool BareHand  { get; set; }

    /// <summary>
    /// The carried weapon (is either a data base weapon or the character's bare hand as weapon). Not null.
    /// </summary>
    [Parameter] public WeaponViMo Weapon { get; set; }

    [Parameter] public EventCallback OnAttackCheck { get; set; }
    [Parameter] public EventCallback OnParryCheck { get; set; }
    [Parameter] public EventCallback StashWeapon { get; set; }

    protected string TitleAttack;
    protected string TitleParry;
    protected string AriaAttack;
    protected string AriaParry;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (HeroHands is null) throw new ArgumentNullException(nameof(HeroHands));
        if (Weapon is null) throw new ArgumentNullException(nameof(Weapon));

        TitleAttack = $"{l10n["lblRoll"]} {l10n["lblAttack"]}";
        TitleParry = $"{l10n["lblRoll"]} {l10n["lblParry"]}";
        AriaAttack = $"{l10n["lblAttack"]} {l10n["lblRoll"]} {Weapon.Name}";
        AriaParry = $"{l10n["lblParry"]} {l10n["lblRoll"]} {Weapon.Name}";
    }


    /// <summary>
    /// Prints attack, parry, and damage points
    /// </summary>
    /// <param name="Weapon">The weapon</param>
    /// <param name="CarriedBy">The hand carrying the weapon</param>
    /// <returns>A segment of UI content</returns>
    private RenderFragment CarriedWeaponProps(WeaponViMo Weapon, HandsViMo.Hand CarriedBy)
    {
        var OtherWeapon = CarriedBy == HandsViMo.Hand.Main ? HeroHands.OffWeapon : HeroHands.MainWeapon;

        string AttackStr, ParryStr, DamageStr;
        int AT = Weapon.AtSkill(HeroHands, OtherWeapon.Branch);
        int PA = Weapon.PaSkill(HeroHands, OtherWeapon.Branch);
        if (AT > 0)
        {
            AttackStr = $"\u2694\u00A0{l10n["abbrvAttack"]}\u00A0{AT}";
            DamageStr = $"\u27B9\u00A0{Weapon.DamageDieCount}{l10n["abbrvDie"]}";
            if (Weapon.DamageBonus > 0) DamageStr = $"{DamageStr}+{Weapon.DamageBonus}";
        }
        else
        {
            AttackStr = DamageStr = "";
        }
        ParryStr =  PA > 0 ? $"🛡{l10n["abbrvParry"]}\u00A0{PA}" : "";

        return @<text>
            <span title=@l10n["lblAttack"]>@AttackStr</span> 
            <span title=@l10n["lblParry"]>@ParryStr</span> 
            <span title=@l10n["lblHitPoints"]>@DamageStr</span></text>;
    }


    /// <summary>
    /// Create a render fragment to display the weapons ranges for ranged weapons
    /// </summary>
    /// <returns>A segment of UI content</returns>
    private RenderFragment WeaponRanges()
    {
        if (Weapon.IsRanged && Weapon.Range is not null && Weapon.Range.Length > 0)
        {
            string Values = $"\u00A0\u219B\u00A0{string.Join(" · ", Weapon.Range)}\u00A0{l10n["lblYard"]}";
            return @<span title=@l10n["lblRangeBrackets"]>@Values</span>;
        }
        else
        {
            return @<span/>;
        }
    }

}
