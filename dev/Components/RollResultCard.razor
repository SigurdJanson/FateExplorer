@using FateExplorer.RollLogic

@inject IStringLocalizer<App> l10n


<MudCard Elevation=2 Class="pa-1 ma-1">
    <MudCardHeader>
        <CardHeaderAvatar>
            <AvatarDiceCup DieSides=@RollResult.DieSides />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=Typo.body1>@Name</MudText>
            <MudText Typo=Typo.body2>@RollResult.RollToString(l10n["abbrvDie"].ToString()[0])</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (CanClose)
            {
                <MudIconButton Icon=@Icons.Material.Sharp.Close Color=Color.Default />
            }
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>
        <MudGrid Spacing=0 Class="my-1">
            @if (RollResult.SuccessLevel != RollSuccess.Level.na)
            {
            <MudItem xs=4>
                <p>@l10n[RollResult.SuccessLevel.ToString()]</p>
            </MudItem>
            }
            <MudItem xs=8>
                <MudSimpleTable Dense=true Hover=false Bordered=false Striped=false Elevation=0 >
                <tbody>
                    <tr>
                        <td>@l10n["lblResultCardResult"]</td>
                        <td>@string.Join(" \u00B7 ", RollResult.RollResult)</td>
                    </tr>
                    @if (RollResult.RollResult.Length > 1)
                    {
                    <tr>
                        <td>@l10n["lblResultCardCombined"]</td>
                        <td>@RollResult.CombinedResult</td>
                    </tr>
                    }
                    @if (RollResult.Modifier is not null)
                    {
                    <tr>
                        <td>@l10n["lblResultCardModifier"]</td>
                        <td>@string.Join(" \u00B7 ", RollResult.Modifier)</td>
                    </tr>
                    }
                </tbody>
            </MudSimpleTable>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


@code {
    /// <summary>
    /// A result object carrying the required data to display the card
    /// </summary>
    [Parameter]
    public RollResultViMo RollResult { get; set; }

    /// <summary>
    /// Displays an extra x-Icon users can close the card with.
    /// </summary>    [Parameter]
    public bool CanClose { get; set; } = false;

    /// <summary>
    /// Display name of the roll
    /// </summary>
    [Parameter]
    public string Name { get; set; } = "Roll";


    const string ValueDivider = " \u00B7 ";


    /// <summary>
    ///  Create an avatar content to be used in the Razor code.
    /// </summary>
    /// <returns>A render fragment that should yield an avatar content</returns>
    private RenderFragment MakeAvatar()
    {
        switch (RollResult.CupType)
        {
            case FreeDiceCupViMo.CupType.Single: 
                return @<span>@RollResult.DieSides[0]</span>;

            case FreeDiceCupViMo.CupType.Multi:  
                return @<span>@RollResult.DieSides[0]</span>;

            case FreeDiceCupViMo.CupType.MixedMulti: 
                return @<span>MIX</span>;

            default: return @<span>MIX</span>; //@(<MudIcon Icon=Icons.Material.Sharp.FormatListNumbered />);
        }
    }
}
