@using FateExplorer.ViewModel

@inject ITheHeroViMo Hero

@if (Hero.HasBorn)
{
    <MudText Typo=Typo.body1>
        @Hero?.Name
    </MudText>

    @foreach (var e in Hero.GetEnergies())
    {
        <MudBadge Visible=@(e.CrossedThresholds > 0)
            Origin=Origin.BottomCenter Content=e.CrossedThresholds Color=Color.Tertiary Overlap=true Dot=false Bordered=false>
            <MudChip Label=true Variant=Variant.Filled  Color=Color.Primary Class="ml-4 rounded-0"
                     Icon=@GetIcon(e.EffMax, e.EffectiveValue, e.Id)
                     OnClick=@(() => IsPopupOpen = !IsPopupOpen)>
                        @e.EffectiveValue.ToString().PadLeft(3, '\u00A0')&nbsp;@e.ShortName
            </MudChip>
        </MudBadge>
    }

    <EnergyPopup @bind-IsOpen=IsPopupOpen Energies=Hero?.GetEnergies() EnergiesChanged=@UpdateEnergies />
}
else
{
    <MudText Typo=Typo.body1>
        ...
    </MudText>
}
<MudSpacer/>
<Date />



@code {
    //


    //
    private bool IsPopupOpen { get; set; }

    //

    private readonly string[] LifeIcon = { Icons.Filled.Favorite, Icons.Filled.FavoriteBorder, Icons.Filled.HeartBroken };
    private readonly string[] AstralIcon = { Icons.Filled.AutoFixHigh, Icons.Filled.AutoFixNormal, Icons.Filled.AutoFixOff };
    private readonly string[] KarmaIcon = { Icons.Filled.Star, Icons.Filled.StarHalf, Icons.Filled.StarOutline };

    private string GetIcon(int Max, int Eff, string Id)
    {
        int Level;
        if (Eff >= Max)
            Level = 0;
        else if (Eff <= 5)
            Level = 2;
        else Level = 1;

        switch (Id)
        {
            case "LP": return LifeIcon[Level];
            case "AE": return AstralIcon[Level];
            case "KP": return KarmaIcon[Level];
            default: return Icons.Material.Sharp.Square;
        }
    }

    private string CharacterName;


    private void UpdateEnergies(List<EnergyViMo> ChangedEnergies)
    {
        foreach (var e in ChangedEnergies)
            Hero.OnEnergyChanged(e);
    }

    private void LoadHeroData()
    {
        if (Hero.HasBorn)
        {
            CharacterName = Hero.Name;
        }
    }

    string BaseColor { get; set; }


    protected override void OnInitialized()
    {
        Hero.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Hero.OnChange -= StateHasChanged;
    }
}
