@using MudBlazor.Utilities
@using System.Text.RegularExpressions
<style>
    .fe-content-group {
        height: calc(100vh - var(--mud-appbar-height));
        min-height: calc(100vh - var(--mud-appbar-height));
        max-height: calc(100vh - var(--mud-appbar-height));
        display: flex;
        overflow: hidden;
    }

    .fe-contentsidebar {
        flex: 0 0 var(--fe-contentsidebar-width); /* Fixed width sidebar (adjust as needed) */
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Scrollbar inside if content overflows */
        background-color: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-lines-default);
    }

    .fe-mainarea {
        flex: 1; /* Take remaining width */
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Scrollbar inside if content overflows */
        background-color: white;
        /*padding-left: var(--fe-contentsidebar-width) !important;*/
    }
</style>
<div class=@Classname style=@Stylename role="group">
    <div class="fe-contentsidebar pa-4">
        @Sidebar
    </div>
    <div class=@MainClassname>
        @MainArea
    </div>
</div>
@code {
    /// <summary>
    /// Child content of the side bar within this component. <br/> Supports a parameter <c>string Class</c>.
    /// </summary>
    [Parameter] public RenderFragment Sidebar { get; set; }

    /// <summary>
    /// Child content of the left area within this component.
    /// </summary>
    [Parameter] public RenderFragment MainArea { get; set; }

    /// <summary>
    /// Width of the component.
    /// </summary>
    [Parameter] public string Width { get; set; } = "30%";

    /// <summary>
    /// The CSS classes applied to this component.
    /// </summary>
    /// <remarks>
    /// Defaults to <c>null</c>. You can use spaces to separate multiple classes. Use the <see cref="Style"/> property to apply custom CSS styles.
    /// </remarks>
    [Parameter] public string Class { get; set; }

    /// <summary>
    /// The CSS classes applied to the sub-component <c>MainArea</c>.
    /// </summary>
    /// <remarks>
    /// Defaults to <c>null</c>. You can use spaces to separate multiple classes. Use the <see cref="Style"/> property to apply custom CSS styles.
    /// </remarks>
    [Parameter] public string MainClass { get; set; }

    /// <summary>
    /// The CSS styles applied to this component.
    /// </summary>
    /// <remarks>
    /// Defaults to <c>null</c>. Use the <see cref="Class"/> property to apply CSS classes.
    /// </remarks>
    [Parameter] public string Style { get; set; }

    /// <summary>
    /// The gap between items, measured in increments of <c>4px</c>.
    /// <br/>
    /// Maximum is <c>20</c>.
    /// <br/>
    /// Default is <c>3</c>.
    /// </summary>
    [Parameter] public int Spacing { get; set; } = 3;

    protected string Classname => new CssBuilder("fe-content-group")
        .AddClass("d-flex")
        .AddClass("flex-row")
        .AddClass($"gap-{Spacing}", Spacing >= 0)
        .AddClass("pa-4")
        .AddClass(Class)
        .Build();

    protected string Stylename =>
        new MudBlazor.Utilities.StyleBuilder()
            .AddStyle("--fe-contentsidebar-width", Width, !string.IsNullOrWhiteSpace(Width))
            .AddStyle(Style)
            .Build();

    protected string MainClassname => new CssBuilder("fe-mainarea")
        .AddClass("pa-4", MainClass is not null && Regex.Matches(MainClass, @"(^|\s)p[axytblrse]-\d\d?(\s|$)", RegexOptions.None).Count == 0)
        .AddClass("pa-4", MainClass is not null && Regex.Matches(MainClass, @"(^|\s)p[axytblrse]-\d\d?(\s|$)", RegexOptions.None).Count == 0)
        .AddClass(MainClass)
        .Build();
}
