@using FateExplorer.RollLogic

@inject IStringLocalizer<App> l10n


<MudCard Elevation=2 Class="pa-1 ma-1">
    <MudCardHeader Style=@($"background:{GetHeaderColor(Result.SuccessLevel)};")>
        <CardHeaderAvatar>
            @if (Result.SuccessLevel != RollSuccess.Level.na)
            {
            <MudAvatar Color=@GetAvatarColor(Result.SuccessLevel) Square=true Size=Size.Large>
                <MudIcon Color=@GetAvatarIconColor(Result.SuccessLevel) Icon=@GetAvatarIcon(Result.SuccessLevel) Size=Size.Large />
            </MudAvatar>
            }
            else
            {
            <MudAvatar Color=@GetAvatarColor(Result.SuccessLevel) Square=true Size=Size.Large>
                <MudIcon Color=@GetAvatarIconColor(Result.SuccessLevel) Icon=@IconsFE.D6(PrimRollResult.RollResult[0]) Size=Size.Large />
            </MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=Typo.body2>@l10n["roll"+Result.SuccessLevel.ToString()]</MudText>
            <MudText Typo=Typo.subtitle1>@l10n[Result.Name]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (CanClose)
            {
                <MudIconButton Icon=@Icons.Material.Sharp.Close Color=Color.Default />
            }
        </CardHeaderActions>
    </MudCardHeader>

    <div> @*Needed for css isolation to work*@
    <MudCardContent Class="check">
        <MudGrid Spacing=0 Class="my-1"> 
            <MudItem xs=12>
                <MudSimpleTable Dense=true Hover=false Bordered=false Striped=false Elevation=0 Class="rolltable">
                <tbody>
                    <tr>
                        <td>@*AttributeLabel*@</td>
                        @if (ShowValueLabel is null)
                            @AttrHead(AttributeHeader)
                        else
                        {
                            <td><MudText Typo=Typo.caption>
                                @ShowValueLabel
                            </MudText></td>
                        }
                        @if (Result.TargetAttr is not null) 
                            @TargetAttrHead(Result.TargetAttrName)
                        <td><MudText Typo=Typo.caption>@l10n["lblResultCardModifier"]</MudText></td>
                    </tr>
                    <tr>
                        <td>@l10n["lblAttributeValue"]</td>
                        @AttrValue(PrimRollResult.RollAgainst)
                        @if (Result.TargetAttr is not null)
                            @TargetAttrValues(Result.TargetAttr)
                        <td>@Result.SummarizedModifier</td>
                    </tr>
                    <tr>
                        <td>@l10n["lblRoll"]</td>
                        @AttrValue(PrimRollResult.RollResult)
                        @if (Result.TargetAttr is not null)
                            @TargetAttrValues(Result.Remainder)
                        <td> &nbsp; </td>  @*No roll against the mod*@
                    </tr>
                </tbody>
                </MudSimpleTable>
            </MudItem>
        </MudGrid>
    </MudCardContent>
    </div>

    @if (Result.PrimaryNeedsConfirmation())
    {
    <MudCardContent>
        <MudText Typo=Typo.body1 Class="d-inline pr-2">
            @l10n["roll"+Result.SuccessLevel.ToString()]
        </MudText>
        <MudButton OnClick=@(() => RollConfirm()) Color=@GetAvatarColor(Result.SuccessLevel) Variant=Variant.Filled Class="d-inline">
            @(Result.SuccessLevel == RollSuccess.Level.PendingCritical ? l10n["btnConfirm"] : l10n["btnAvoid"])
        </MudButton>
    </MudCardContent>
    }
    @if (Result.GetConfirmationResult() is not null)
    {
    <MudCardContent>
        <MudText Typo=Typo.body1 Class="d-inline">@GetConfirmationMessage(Result.SuccessLevel)</MudText>
        <MudText Typo=Typo.body1 Class="d-inline">
            [@l10n["lblRoll"] @(Result.GetRollResult(RollType.Confirm).CombinedResult)]
        </MudText>
    </MudCardContent>
    }

    @if (Result.NeedsBotchEffect())
    {
    <MudCardContent>
        <MudButton OnClick=@(() => RollBotchEffect()) Color=@GetAvatarColor(Result.SuccessLevel) Variant=Variant.Filled>
            @l10n["btnBotchEffect"]
        </MudButton>
    </MudCardContent>
    }

    @if (Result.NeedsDamage())
    {
    <MudCardContent>
        <MudButton OnClick=@(() => RollDamage()) Color=Color.Primary Variant=Variant.Filled>
            @l10n["btnDamage"]
        </MudButton>
    </MudCardContent>
    }

    @if (Result.Classification is not null)
    {
    <MudCardContent>
        <MudText Typo=Typo.subtitle1>
            @l10n[Result.ClassificationLabel ?? ""] @Result.Classification
        </MudText>
    </MudCardContent>
    }


</MudCard>


@code {
    /// <summary>
    /// A result object carrying the required data to display the card
    /// </summary>
    [Parameter]
    public RollCheckResultViMo Result { get; set; }

    /// <summary>
    /// Displays an extra x-Icon users can close the card with.
    /// </summary>
    [Parameter]
    public bool CanClose { get; set; } = false;

    /// <summary>
    /// Display an extra row with value labels
    /// </summary>
    [Parameter]
    public string ShowValueLabel { get; set; }


    /// <summary>
    /// A list of strings holding the icons that can be used as avatars. 
    /// Supports 1, 2, 4 or 6 different icons to be displayed with different success
    /// levels.
    /// </summary>
    [Parameter]
    public string[] AvatarIcon { get; set; } = { Icons.Material.Sharp.HelpCenter };



    protected RollResultViMo PrimRollResult { get; set; }
    protected string[] AttributeHeader;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PrimRollResult = Result.GetPrimaryResult();
        AttributeHeader = new string[Result.RollAttrName.Length];
        for (int a = 0; a < Result.RollAttrName.Length; a++)
            AttributeHeader[a] = l10n[Result.RollAttrName[a]];
    }


    private void RollConfirm()
    {
        Result.GetRollResult(RollType.Confirm, true);
        this.StateHasChanged();
    }    

    private void RollBotchEffect()
    {
        Result.GetRollResult(RollType.Botch, true);
        this.StateHasChanged();
    }

    private void RollDamage()
    {
        Result.GetRollResult(RollType.Damage, true);
        this.StateHasChanged();
    }

    // TEMPLATES

    private string GetAvatarIcon(RollSuccess.Level Success)
    {
        if (AvatarIcon.Length == 1)
            return AvatarIcon[0];
        if (AvatarIcon.Length == 2)
        {
            return Success switch
            {
                RollSuccess.Level.Botch => AvatarIcon[0],
                RollSuccess.Level.PendingBotch => AvatarIcon[0],
                RollSuccess.Level.Fail => AvatarIcon[0],
                RollSuccess.Level.Critical => AvatarIcon[1],
                RollSuccess.Level.Success => AvatarIcon[1],
                RollSuccess.Level.PendingCritical => AvatarIcon[1],
                _ => Icons.Material.Sharp.HelpCenter
            };
        }        
        if (AvatarIcon.Length == 4)
        {
            return Success switch
            {
                RollSuccess.Level.Botch => AvatarIcon[0],
                RollSuccess.Level.PendingBotch => AvatarIcon[0],
                RollSuccess.Level.Fail => AvatarIcon[1],
                RollSuccess.Level.Success => AvatarIcon[2],
                RollSuccess.Level.PendingCritical => AvatarIcon[3],
                RollSuccess.Level.Critical => AvatarIcon[3],
                _ => Icons.Material.Sharp.HelpCenter
            };
        }
        if (AvatarIcon.Length == 6)
        {
            return Success switch
            {
                RollSuccess.Level.Botch => AvatarIcon[0],
                RollSuccess.Level.PendingBotch => AvatarIcon[1],
                RollSuccess.Level.Fail => AvatarIcon[2],
                RollSuccess.Level.Success => AvatarIcon[3],
                RollSuccess.Level.PendingCritical => AvatarIcon[4],
                RollSuccess.Level.Critical => AvatarIcon[5],
                _ => Icons.Material.Sharp.HelpCenter
            };
        }
        return Icons.Material.Sharp.HelpCenter;
    }



    private Color GetAvatarColor(RollSuccess.Level Success) =>
        Success switch
        {
            RollSuccess.Level.Botch => Color.Error,
            RollSuccess.Level.Fail => Color.Error,
            RollSuccess.Level.Critical => Color.Success,
            RollSuccess.Level.Success => Color.Success,
            RollSuccess.Level.PendingBotch => Color.Warning,
            RollSuccess.Level.PendingCritical => Color.Warning,
            _ => Color.Info
        };


    private string GetHeaderColor(RollSuccess.Level Success)
    {
        if (Success == RollSuccess.Level.Critical || Success == RollSuccess.Level.Botch)
            return $"var(--mud-palette-{GetAvatarColor(Success).ToString().ToLower()})";
        else
            return "inherited";
    }
    

    private Color GetAvatarIconColor(RollSuccess.Level Success) =>
        Success switch
        {
            RollSuccess.Level.Botch => Color.Surface,
            RollSuccess.Level.Fail => Color.Surface,
            RollSuccess.Level.Critical => Color.Surface,
            RollSuccess.Level.Success => Color.Surface,
            RollSuccess.Level.PendingBotch => Color.Dark,
            RollSuccess.Level.PendingCritical => Color.Dark,
            _ => Color.Surface
        };

    private string GetConfirmationMessage(RollSuccess.Level Outcome) =>
        Outcome switch
        {
            RollSuccess.Level.Botch => l10n["msgBotchConfirmed"],
            RollSuccess.Level.Fail => l10n["msgBotchAvoided"],
            RollSuccess.Level.Success => l10n["msgCriticalLost"],
            RollSuccess.Level.Critical => l10n["msgCriticalConfirmed"],
            _ => ""
        };



    RenderFragment<string> TargetAttrHead = Name => __builder =>
    {
        if (Name is not null)
        {
            <td><MudText Typo=Typo.caption>@Name</MudText></td>
        }
    };

    RenderFragment<int?> TargetAttrValues = Value => __builder =>
    {
        if (Value is not null)
        {
        <td>@Value</td>
        }
    };


    RenderFragment<string[]> AttrHead = Name => __builder =>
    {
        if (Name is not null)
        {
            foreach (string n in Name)
            {
            <td><MudText Typo=Typo.caption>@n</MudText></td>
            }
        }
    };

    RenderFragment<int[]> AttrValue = Value => __builder =>
    {
        if (Value is not null)
        {
            foreach (var v in Value)
            {
            <td>@v</td>
            }
        }
    };

}
