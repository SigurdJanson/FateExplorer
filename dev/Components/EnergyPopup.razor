@using FateExplorer.RollLogic
@using FateExplorer.Shared
@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n
@inject IRollHandlerViMo RollHandler
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudPopover @bind-Open=IsOpen Square=true RelativeWidth=true
            OverflowBehavior=OverflowBehavior.FlipAlways AnchorOrigin=Origin.BottomCenter TransformOrigin=Origin.TopCenter 
            Class="px-6 pt-4">

<div class="d-flex flex-row">
    <MudSpacer/><MudIconButton Icon=@Icons.Material.Filled.Close OnClick=Close />
</div>

<MudContainer>
    <MudGrid Justify=Justify.Center>
        @foreach (var energy in Energies)
        {
        <MudItem xs=4 xl=4 xxl=2>
            <EnergyCard Energy=@energy EnergyChanged=@OnEnergyChanged />
        </MudItem>
        }

        <MudItem xs=9 Class="mb-2">
            <MudText>@l10n["lblRegenerate6Hours"]</MudText>
            <MudTooltip Text=@l10n["msgRegenerationSite.Good"]>
                <MudIconButton Icon=@Icons.Material.Sharp.Hotel OnClick=@(() => Regenerate(RegenerationSite.Good, RegenerationDisturbance.None)) 
                    Variant=Variant.Outlined Disabled=@(!CanRegenerate())/>
            </MudTooltip>
            <MudTooltip Text=@l10n["msgRegenerationSite.Default"]>
                <MudIconButton Icon=@Icons.Material.Sharp.Fireplace  OnClick=@(() => Regenerate(RegenerationSite.Default, RegenerationDisturbance.None))  
                    Variant=Variant.Outlined Disabled=@(!CanRegenerate())/>
            </MudTooltip>
            <MudTooltip Text=@l10n["msgRegenerationSite.Poor"]>
                <MudIconButton Icon=@Icons.Material.Sharp.AcUnit OnClick=@(() => Regenerate(RegenerationSite.Poor, RegenerationDisturbance.None)) 
                    Variant=Variant.Outlined Disabled=@(!CanRegenerate())/>
            </MudTooltip>
            <MudButton OnClick=@OpenDialog Variant=Variant.Outlined Disabled=@(!CanRegenerate())>@l10n["btnRegenerate"] ...</MudButton>

           <MudTooltip Text=@l10n["btnFallDamage"]>
                <MudIconButton Icon=@IconsFE.Botch OnClick=@OpenFallDialog Variant=Variant.Outlined Class="ml-4" />
            </MudTooltip>
        </MudItem>
    </MudGrid>
</MudContainer>
</MudPopover>




@code {
    /// <summary>
    /// Determines whether the popup is open or closed.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }

    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Data container for the energies to be displayed.
    /// </summary>
    [Parameter] public List<EnergyViMo> Energies { get; set; }

    [Parameter] public EventCallback<List<EnergyViMo>> EnergiesChanged { get; set; }



    private void OnEnergyChanged(EnergyViMo changedE)
    {
        for (int i = 0; i < Energies.Count; i++)
            if (Energies[i].Id == changedE.Id)
                Energies[i] = changedE;

        EnergiesChanged.InvokeAsync(Energies);
    }


    private void Close()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(IsOpen);
    }



    private bool CanRegenerate(EnergyViMo e) => e.EffectiveValue < e.EffMax;


    private bool CanRegenerate()
    {
        foreach (var e in Energies)
            if (CanRegenerate(e)) return true;
        return false;
    }


    /// <summary>
    /// Regerate the character's energies
    /// </summary>
    /// <param name="site">Quality of the accomodations</param>
    /// <param name="disturb">list character disturbed during rest?</param>
    /// <param name="isSick">list character sick or poisoned?</param>
    /// <param name="mod">An arbitrary modifier; null or array with same length as available energies</param>
    private void Regenerate(RegenerationSite site, RegenerationDisturbance disturb, bool isSick = false, int[] mod = null)
    {
        if (mod is not null && mod.Length != Energies.Count)
            throw new ArgumentException("If modifiers are given, there should be as many as ther are energies", nameof(mod));

        List<RollResultViMo> Rolls = new();
        int i = 0;
        foreach (var e in Energies)
        {
            int Modifier = mod?[i++] ?? 0;
            // Check if regeneration is meaningfull (it is not if the value is at max already)
            var Result = e.Regenerate(site, disturb, isSick, Modifier);
            if (Result is null) continue;

            Rolls.Add(Result);
            string Message;
            if (Rolls.Last().CombinedResult > 0)
            {
                string Sign = Math.Sign(Rolls.Last().Modifier[0]) switch
                {
                    -1 => " - ", +1 => " + ", _ => string.Empty
                };
                string Value = Rolls.Last().Modifier[0] == 0 ? "" : Math.Abs(Rolls.Last().Modifier[0]).ToString();
                Message = String.Format(l10n["msgRegenerationSuccess"], e.ShortName, Sign, Value, Rolls.Last().CombinedResult);
            }
            else
                Message = String.Format(l10n["msgNoRegeneration"], e.ShortName);
            Snackbar.Add(Message, Severity.Info, config =>
                {
                    config.SnackbarVariant = Variant.Outlined;
                });
        }
        EnergiesChanged.InvokeAsync(Energies);
    }


    // DIALOG

    private DialogOptions dialogOptions = new() 
    { 
        FullWidth = true,
        CloseOnEscapeKey = true
    };


    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        List<string> tbd = new();
        foreach (var e in Energies)
            if (CanRegenerate(e)) tbd.Add(e.ShortName);

        parameters.Add("Names", tbd.ToArray() );

        var dialog = DialogService.Show<RegenerationDialog>("", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            (RegenerationSite, RegenerationDisturbance, bool, int[]) Settings;
            Settings = ((RegenerationSite, RegenerationDisturbance, bool, int[]))result.Data;
            // Create a new array of modifiers with one for each energy
            if (Settings.Item4.Length < Energies.Count)
            {
                int[] Replace = new int[Energies.Count];
                int j = 0;
                for (int i = 0; i < Energies.Count; i++)
                {
                    if (CanRegenerate(Energies[i])) 
                        Replace[i] = Settings.Item4[j++];
                    else
                        Replace[i] = 0;
                }
                Settings.Item4 = Replace;
            }
            Regenerate(Settings.Item1, Settings.Item2, Settings.Item3, Settings.Item4);
        }
    }


    /// <summary>
    /// Shows a dialog window for the user to specify fall damage.
    /// </summary>
    /// <returns></returns>
    private async Task OpenFallDialog()
    {
        var parameters = new DialogParameters();

        var dialog = DialogService.Show<DlgFallDamage>("", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            (int height, int groundMod, int JumpQl, int armourMod, int paddingMod) Settings;
            Settings = ((int, int, int, int, int))result.Data;

            foreach (var e in Energies)
            {
                var Result = e.FallDamage(Settings.height, Settings.groundMod, Settings.JumpQl, Settings.armourMod, Settings.paddingMod);
                if (Result is null) continue;

                string Message;
                if (Result.CombinedResult < 0)
                {
                    string Sign = Math.Sign(Result.Modifier[0]) switch
                    {
                        -1 => " - ",
                        +1 => " + ",
                        _ => string.Empty
                    };
                    string Value = Result.Modifier[0] == 0 ? "" : Math.Abs(Result.Modifier[0]).ToString();
                    Message = String.Format(l10n["msgDamageCaused"], e.ShortName, Sign, Value, Result.CombinedResult);
                }
                else
                    Message = String.Format(l10n["msgNoDamage"], e.ShortName);
                Snackbar.Add(Message, Severity.Info, config =>
                    {
                        config.SnackbarVariant = Variant.Outlined;
                    });
            }
            await EnergiesChanged.InvokeAsync(Energies);
        }
    }
}
