@using FateExplorer.Shared;
@using FateExplorer.ViewModel;

@inject IStringLocalizer<App> l10n


<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs=3>
                <MudPaper Outlined=true Class="pa-4">
                    <MudText Typo=@Typo.body2>@l10n["lblHero"]</MudText>
                    <MudText Typo=@Typo.body1>@Hero</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs=6>
                <MudPaper Outlined=true Class="pa-4">
                    @if (Weapon.Branch == CombatBranch.Ranged)
                    {
                    @l10n["lblDistance"]
                        <MudSlider Min=0 Max=2 TickMarks=true TickMarkLabels=@DistanceLabels Step=1 Value=@Distance Size=Size.Large />
                    }
                    else
                    {
                        <MudText Typo.body1 Align=@Align.Center>@l10n["lblCloseCombat"]</MudText>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs=3>
                <MudPaper Outlined=true Class="pa-4">
                    <MudText Typo=@Typo.subtitle1>@l10n["lblEnemy"]</MudText>
                </MudPaper>
            </MudItem>

            <MudGrid Class="pt-4">
                <MudItem xs=12>
                    <MudText Typo=@Typo.h6>@l10n["lblWeapon"]</MudText>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudText>@Weapon.Name, @l10n[Weapon.Branch.ToString()]</MudText>
                        <MudText>Current modifier: @Modifier</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudText Typo=@Typo.subtitle1>@l10n["lblEnemyReach"]</MudText>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=EnemyReachShort Title="###Short reach weapon###"
                                                 Icon=@IconsFE.BrassKnuckles ToggledIcon=@IconsFE.BrassKnuckles
                                                 Disabled=@EnemyReachDisabled
                                                 Color=OffCol ToggledColor=OnCol /> 
                            <MudToggleIconButton @bind-Toggled=EnemyReachMedium Title="###Med reach weapon###"
                                                 Icon=@IconsFE.Sword ToggledIcon=@IconsFE.Sword
                                                 Disabled=@EnemyReachDisabled
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyReachLong Title="###Long reach weapon###"
                                                 Icon=@IconsFE.Spear ToggledIcon=@IconsFE.Spear
                                                 Disabled=@EnemyReachDisabled
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudGrid Class="pt-4">
                <MudItem xs=12>
                    <MudText Typo=@Typo.h6>@l10n["lblDisabilities"]</MudText>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudText Typo=@Typo.subtitle1>@l10n["lblVisibility"]</MudText>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=ClearVision Title=@l10n["lblVisionClear"]
                                                 Icon=@IconsFE.Vision0_Clear ToggledIcon=@IconsFE.Vision0_Clear
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=ImpairedVision Title=@l10n["lblVisionImpaired"]
                                                 Icon=@IconsFE.Vision1_Impaired ToggledIcon=@IconsFE.Vision1_Impaired
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=ShapyVision Title=@l10n["lblVisionShapesOnly"]
                                                 Icon=@IconsFE.Vision2_ShapesOnly ToggledIcon=@IconsFE.Vision2_ShapesOnly
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=BareVision Title=@l10n["lblVisionBarely"]
                                                 Icon=@IconsFE.Vision3_Barely ToggledIcon=@IconsFE.Vision3_Barely
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=NoVision Title=@l10n["lblVisionNone"]
                                                 Icon=@IconsFE.Vision4_None ToggledIcon=@IconsFE.Vision4_None
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>

                        <MudText Typo=@Typo.subtitle1>@l10n["lblUnderWater"]</MudText>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=NoWater Title=@l10n["lblWaterNone"]
                                                 Icon=@IconsFE.Water0_Dry ToggledIcon=@IconsFE.Water0_Dry
                                                 Color=OffCol ToggledColor =OnCol />
                            <MudToggleIconButton @bind-Toggled=Water2Knee Title=@l10n["lblWater2Knee"]
                                                 Icon=@IconsFE.Water1_Knee ToggledIcon=@IconsFE.Water1_Knee
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=Water2Waist Title=@l10n["lblWater2Waist"]
                                                 Icon=@IconsFE.Water2_Waist ToggledIcon=@IconsFE.Water2_Waist
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=Water2Chest Title=@l10n["lblWater2Chest"]
                                                 Icon=@IconsFE.Water3_Chest ToggledIcon=@IconsFE.Water3_Chest
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=Water2Neck Title=@l10n["lblWater2Neck"]
                                                 Icon=@IconsFE.Water4_Neck ToggledIcon=@IconsFE.Water4_Neck
                                                 Color=OffCol ToggledColor =OnCol />
                            <MudToggleIconButton @bind-Toggled=Submerged Title=@l10n["lblWaterSubmerged"]
                                                 Icon=@IconsFE.Water5_Submerged ToggledIcon=@IconsFE.Water5_Submerged
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                        <br />
                        <span>
                        @l10n["lblCramped"]
                        <MudIcon Icon=@Icons.Material.Filled.Accessibility />
                            <MudSwitch @bind-Checked=CrampedSpace Size=Size.Large Title=@l10n["lblCramped"]
                                   ThumbIconColor=@(CrampedSpace==true ? OnCol : OffCol) 
                                   Disabled=@CrampedSpaceDisabled />
                        <MudIcon Icon=@IconsFE.Cramped />
                        </span>
                    </MudPaper>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudText Typo=@Typo.subtitle1>@l10n["lblEnemySize"]</MudText>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=EnemyTiny Title=@l10n["lblEnemyTiny"]
                                                 Icon=@IconsFE.AnimalToad ToggledIcon=@IconsFE.AnimalToad
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemySmall Title=@l10n["lblEnemySmall"]
                                                 Icon=@IconsFE.AnimalSheep ToggledIcon=@IconsFE.AnimalSheep
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyMedium Title=@l10n["lblEnemyMedium"]
                                                 Icon=@Icons.Material.Filled.Accessibility ToggledIcon=@Icons.Material.Filled.Accessibility
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyLarge Title=@l10n["lblEnemyLarge"]
                                                 Icon=@IconsFE.AnimalCow ToggledIcon=@IconsFE.AnimalCow
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyHuge Title=@l10n["lblEnemyHuge"]
                                                 Icon=@IconsFE.AnimalDragon ToggledIcon=@IconsFE.AnimalDragon
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudGrid Class="pt-4">
                <MudItem xs=12>
                    <MudText Typo=@Typo.h6>@l10n["lblCombatMovement"]</MudText>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=NoMovement Title=@l10n["lblMoveStationary"]
                                                 Icon=@IconsFE.Onfoot0_Stand ToggledIcon=@IconsFE.Onfoot0_Stand
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=MovementWalk Title=@l10n["lblMoveWalk"]
                                                 Icon=@IconsFE.Onfoot1_Walk ToggledIcon=@IconsFE.Onfoot1_Walk
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=MovementRun Title=@l10n["lblMoveRun"]
                                                 Icon=@Icons.Material.Filled.DirectionsRun ToggledIcon=@Icons.Material.Filled.DirectionsRun
                                                  Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=MovementGaitWalk Title=@l10n["lblMoveGaitWalk"]
                                                 Icon=@IconsFE.Mounted1_Walk ToggledIcon=@IconsFE.Mounted1_Walk
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=MovementTrot Title=@l10n["lblMoveGaitTrot"]
                                                 Icon=@IconsFE.Mounted2_Trot ToggledIcon=@IconsFE.Mounted2_Trot
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=MovementGallop Title=@l10n["lblMoveGaitGallop"]
                                                 Icon=@IconsFE.Mounted3_Gallop ToggledIcon=@IconsFE.Mounted3_Gallop
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                    </MudPaper>
                </MudItem>
                <MudItem xs=12 sm=6>
                    <MudPaper Outlined=true Class="pa-4" Style="height: 100%">
                        <MudButtonGroup Color=Color.Primary Variant=Variant.Filled Size=Size.Large>
                            <MudToggleIconButton @bind-Toggled=EnemyNoMovement Title=@l10n["lblMoveStationary"]
                                                 Icon=@IconsFE.Onfoot0_Stand ToggledIcon=@IconsFE.Onfoot0_Stand
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyMovementWalk Title=@l10n["lblMoveWalk"]
                                                 Icon=@IconsFE.Onfoot1_Walk ToggledIcon=@IconsFE.Onfoot1_Walk
                                                 Color=OffCol ToggledColor=OnCol />
                            <MudToggleIconButton @bind-Toggled=EnemyMovementRun Title=@l10n["lblMoveRun"]
                                                 Icon=@Icons.Material.Filled.DirectionsRun ToggledIcon=@Icons.Material.Filled.DirectionsRun
                                                 Color=OffCol ToggledColor=OnCol />
                        </MudButtonGroup>
                        <MudSwitch @bind-Checked=EnemyEvasive Size=Size.Large
                                   ThumbIconColor=@(EnemyEvasive==true ? OnCol : OffCol)
                                   Disabled=@EnemyEvasiveDisabled >
                            @l10n["lblEnemyRunningZigZag"]
                        </MudSwitch>
                    </MudPaper>
                </MudItem>
            </MudGrid>

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Reset">@l10n["btnReset"]</MudButton>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudButton OnClick="Cancel">@l10n["btnCancel"]</MudButton>
        <MudButton Color=Color.Primary Variant=Variant.Filled OnClick="Submit">@l10n["btnApply"]</MudButton>
    </DialogActions>
</MudDialog>



@code {
    // API
    [Parameter]
    public WeaponViMo Weapon { get; set; }

    [Parameter]
    public string Hero { get; set; } = "Nameless Hero";

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    // RESULT
    //private BattlegroundViMo { get; set; }
    private int Modifier { get; set; } = 0;

    // SETTINGS
    // Defaults
    private const int DistanceDefault = 0;
    private const Vision ViewDefault = Vision.Clear;
    private const UnderWater WaterDefault = UnderWater.Dry;
    private const bool CrampedSpaceDefault = false;
    private const Movement MovingDefault = Movement.None;
    private const Movement EnemyMovingDefault = Movement.None;
    private const WeaponsReach EnemyReachDefault = WeaponsReach.Medium;
    private const EnemySize SizeOfEnemyDefault = EnemySize.Medium;
    private const bool EnemyEvasiveDefault = false;

    //
    private string[] DistanceLabels = new string[] { "Nah", "Mittel", "Weit" };
    private int Distance = DistanceDefault;

    //
    private Vision View { get; set; } = ViewDefault;
    private bool ClearVision { get => View == Vision.Clear; set { if (value) View = Vision.Clear; } }
    private bool ImpairedVision { get => View == Vision.Impaired; set { if (value) View = Vision.Impaired; } }
    private bool ShapyVision { get => View == Vision.ShapesOnly; set { if (value) View = Vision.ShapesOnly; } }
    private bool BareVision { get => View == Vision.Barely; set { if (value) View = Vision.Barely; } }
    private bool NoVision { get => View == Vision.NoVision; set { if (value) View = Vision.NoVision; } }

    //
    private UnderWater Water { get; set; } = UnderWater.Dry;
    private bool NoWater { get => Water == UnderWater.Dry; set { if (value) Water = UnderWater.Dry; } }
    private bool Water2Knee { get => Water == UnderWater.KneeDeep; set { if (value) Water = UnderWater.KneeDeep; } }
    private bool Water2Waist { get => Water == UnderWater.WaistDeep; set { if (value) Water = UnderWater.WaistDeep; } }
    private bool Water2Chest { get => Water == UnderWater.ChestDeep; set { if (value) Water = UnderWater.ChestDeep; } }
    private bool Water2Neck { get => Water == UnderWater.NeckDeep; set { if (value) Water = UnderWater.NeckDeep; } }
    private bool Submerged { get => Water == UnderWater.Submerged; set { if (value) Water = UnderWater.Submerged; } }


    //
    private bool CrampedSpace { get; set; } = CrampedSpaceDefault;
    private bool CrampedSpaceDisabled => Weapon.Branch == CombatBranch.Ranged; // TODO: get from backend

    //
    private Movement Moving { get; set; } = MovingDefault;
    private bool NoMovement { get => Moving == Movement.None; set { if (value) Moving = Movement.None; } }
    private bool MovementWalk { get => Moving == Movement.Slow; set { if (value) Moving = Movement.Slow; } }
    private bool MovementRun { get => Moving == Movement.Fast; set { if (value) Moving = Movement.Fast; } }
    private bool MovementGaitWalk { get => Moving == Movement.GaitWalk; set { if (value) Moving = Movement.GaitWalk; } }
    private bool MovementTrot { get => Moving == Movement.GaitTrot; set { if (value) Moving = Movement.GaitTrot; } }
    private bool MovementGallop { get => Moving == Movement.GaitGallop; set { if (value) Moving = Movement.GaitGallop; } }
    //
    private Movement EnemyMoving { get; set; } = EnemyMovingDefault;
    private bool EnemyNoMovement { get => EnemyMoving == Movement.None; set { if (value) EnemyMoving = Movement.None; } }
    private bool EnemyMovementWalk { get => EnemyMoving == Movement.Slow; set { if (value) EnemyMoving = Movement.Slow; } }
    private bool EnemyMovementRun { get => EnemyMoving == Movement.Fast; set { if (value) EnemyMoving = Movement.Fast; } }

    //
    private WeaponsReach EnemyReach { get; set; } = EnemyReachDefault;
    private bool EnemyReachDisabled => Weapon.Branch == CombatBranch.Ranged;
    private bool EnemyReachShort { get => EnemyReach == WeaponsReach.Short; set { if (value) EnemyReach = WeaponsReach.Short; } }
    private bool EnemyReachMedium { get => EnemyReach == WeaponsReach.Medium; set { if (value) EnemyReach = WeaponsReach.Medium; } }
    private bool EnemyReachLong { get => EnemyReach == WeaponsReach.Long; set { if (value) EnemyReach = WeaponsReach.Long; } }


    //
    private EnemySize SizeOfEnemy { get; set; } = SizeOfEnemyDefault;
    private bool EnemyTiny { get => SizeOfEnemy == EnemySize.Tiny; set { if (value) SizeOfEnemy = EnemySize.Tiny; } }
    private bool EnemySmall { get => SizeOfEnemy == EnemySize.Small; set { if (value) SizeOfEnemy = EnemySize.Small; } }
    private bool EnemyMedium { get => SizeOfEnemy == EnemySize.Medium; set { if (value) SizeOfEnemy = EnemySize.Medium; } }
    private bool EnemyLarge { get => SizeOfEnemy == EnemySize.Large; set { if (value) SizeOfEnemy = EnemySize.Large; } }
    private bool EnemyHuge { get => SizeOfEnemy == EnemySize.Huge; set { if (value) SizeOfEnemy = EnemySize.Huge; } }

    //
    private bool EnemyEvasive { get; set; } = EnemyEvasiveDefault;
    private bool EnemyEvasiveDisabled => Weapon.Branch != CombatBranch.Ranged; // TODO: get from backend

    //
    // ACTIONS
    private void Submit() => MudDialog.Close(DialogResult.Ok(true));
    private void Cancel() => MudDialog.Cancel();

    private void Reset()
    {
        EnemyEvasive = EnemyEvasiveDefault;
        SizeOfEnemy = SizeOfEnemyDefault;
        EnemyReach = EnemyReachDefault;
        EnemyMoving = EnemyMovingDefault;
        Moving = MovingDefault;
        CrampedSpace = CrampedSpaceDefault;
        Water = UnderWater.Dry;
        View = ViewDefault;
        Distance = DistanceDefault;
    }


    // RENDERING
    //...
    private const Color OnCol = Color.Surface;
    private const Color OffCol = Color.Secondary;


}
