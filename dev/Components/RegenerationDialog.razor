@inject IStringLocalizer<App> l10n

<MudDialog>
    <TitleContent>
        <MudText Typo=Typo.h6>
            <MudIcon Icon=@Icons.Material.Sharp.NightsStay Class="mr-3"/> @l10n["titleRegenerationDialog"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @if (Names is not null)
                @foreach (var n in Names)
                {
                <MudItem sm=12 md=@(12 / Names.Length)>
                    <MudPaper Elevation=0 Outlined=true Class="pb-2">
                    <MudAvatar Square=true Variant=Variant.Filled Alt=@n>@n</MudAvatar>
                    <MudTooltip Text=@l10n["txtModifierTip"]>
                        <MudSlider Min=-6 Max=6 Step=1 TickMarks=true Size=Size.Small Variant=Variant.Filled
                            @bind-Value=Modifier[n]>
                            @($"{l10n["lblModifier"]} {Modifier[n]}")
                        </MudSlider>
                    </MudTooltip>
                    </MudPaper>
                </MudItem>
                <MudDivider/>
                }
            <MudItem sm=12 md=6>
                <MudRadioGroup @bind-SelectedOption=DialogSiteSetting>
                    <MudRadio Option=RegenerationSite.Good Dense=true>@l10n["lblRegenerationSite.Good"]</MudRadio>
                    <MudRadio Option=RegenerationSite.Default Dense=true>@l10n["lblRegenerationSite.Default"]</MudRadio>
                    <MudRadio Option=RegenerationSite.Poor Dense=true>@l10n["lblRegenerationSite.Poor"]</MudRadio>
                    <MudRadio Option=RegenerationSite.Bad  Dense=true>@l10n["lblRegenerationSite.Bad"]</MudRadio>
                    <MudRadio Option=RegenerationSite.Terrible Dense=true>@l10n["lblRegenerationSite.Terrible"]</MudRadio>
                </MudRadioGroup>
            </MudItem>
            <MudItem sm=12 md=6>
                <MudRadioGroup @bind-SelectedOption=DialogDisturbSetting>
                    <MudRadio Option=RegenerationDisturbance.None  Dense=true>@l10n["lblRegenerationDisturbance.None"]</MudRadio>
                    <MudRadio Option=RegenerationDisturbance.Brief Dense=true>@l10n["lblRegenerationDisturbance.Brief"]</MudRadio>
                    <MudRadio Option=RegenerationDisturbance.Prolonged Dense=true>@l10n["lblRegenerationDisturbance.Prolonged"]</MudRadio>
                </MudRadioGroup>
            </MudItem>
            <MudItem xs=12>
                @*<MudText><MudIcon Icon=@Icons.Material.Sharp.Sick Size=Size.Medium /></MudText>*@
                <MudCheckBox @bind-Checked=DialogSickness Dense=true Label=@l10n["lblRegenerateSick"] StopClickPropagation=true  />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant=Variant.Outlined Color=Color.Primary OnClick=@ResetDialog Class="px-10">
            @l10n["btnReset"]
        </MudButton>
        <MudSpacer />
        <MudButton Variant=Variant.Outlined Color=Color.Primary OnClick=@CancelDialog Class="px-10">
            @l10n["btnCancel"]
        </MudButton>
        <MudButton Variant=Variant.Filled  Color=Color.Primary OnClick=@SubmitDialog Class="px-10" ButtonType=ButtonType.Submit>
            @l10n["btnRegenerate"]
        </MudButton>
    </DialogActions>
</MudDialog>




@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    /// <summary>
    /// List of the names for those types of energy which the dialog is supposed to
    /// display. Names should be abbreviated and localised.
    /// </summary>
    [Parameter] public string[] Names { get; set; }


    private Dictionary<string, int> Modifier { get; set; }

    private RegenerationSite DialogSiteSetting { get; set; } = RegenerationSite.Default;

    private RegenerationDisturbance DialogDisturbSetting { get; set; } = RegenerationDisturbance.None;

    private bool DialogSickness = false;



    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Modifier = new();
        foreach (var n in Names)
            Modifier.Add(n, 0);
    }



    private void SubmitDialog()
    {
        var Result = (DialogSiteSetting, DialogDisturbSetting, DialogSickness, Modifier.Values.ToArray());
        MudDialog.Close(DialogResult.Ok( Result ));
    }    

    private void CancelDialog()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private void ResetDialog()
    {
        DialogSiteSetting = RegenerationSite.Default;
        DialogDisturbSetting = RegenerationDisturbance.None;
        DialogSickness = false;
        foreach (var Key in Modifier.Keys)
            Modifier[Key] = 0;
    }
}
