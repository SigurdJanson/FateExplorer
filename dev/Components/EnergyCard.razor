@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n

<MudCard Outlined=true Squared=true Class="mb-4">

    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=Typo.h6>@Energy.Name</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudProgressLinear Color=Color.Primary Size=Size.Small Value=@(EffValue*100/MaxValue) Class="mb-2" >
            |
        </MudProgressLinear>
    </MudCardContent>
    <MudCardContent>
        <div class="d-flex justify-space-around">@l10n["lblAvailable"]</div>
        <div class="d-flex justify-space-around flex-grow-1 gap-4">
        @EnergyPlusMinus(-2)
        @EnergyPlusMinus(-1)
        <MudBadge Origin=Origin.BottomCenter Content=@Energy.CrossedThresholds Color=Color.Tertiary Overlap=true Dot=false Bordered=false>
            <MudAvatar Square=true Color=Color.Primary Size=Size.Large Alt=@l10n["lblAvailable"]>@EffValue</MudAvatar>
        </MudBadge>
        @EnergyPlusMinus(1)
        @EnergyPlusMinus(2)
        </div>
        <div class="d-flex justify-space-around mt-1">@l10n["lblCrossedThresholds"]</div>
    </MudCardContent>
    
    <MudCardContent>
        <MudGrid>
            <MudItem sm=12 md=4>
                <MudNumericField Value=@Energy.Min Label=@l10n["lblMinimum"] 
                    Variant=Variant.Text HideSpinButtons=true Disabled=true Style="color:black" />
            </MudItem>
            <MudItem sm=12 md=4>
                <MudNumericField Value=@EffValue ValueChanged=@((int i) => SetEffValue(i)) Label=@l10n["lblAvailable"]
                    Variant=Variant.Text Min=@Energy.Min Max=99 HideSpinButtons=true  Style="min-width:4rem;" 
                    Adornment=@ShowResetButton(EffValue, Energy.EffMax) AdornmentIcon=@Icons.Material.Sharp.SettingsBackupRestore 
                    OnAdornmentClick=@FullyRestore AdornmentAriaLabel=@l10n["btnFullyRestore"] />
            </MudItem>
            <MudItem sm=12 md=4>
                <MudNumericField Value=@MaxValue ValueChanged=@((int i) => SetEffMaxValue(i)) Label=@l10n["lblMaximum"]
                    Variant=Variant.Text Min=1 HideSpinButtons=true 
                    Disabled=false Style="color:black" 
                    Adornment=@ShowResetButton(Energy.EffMax, Energy.Max) AdornmentIcon=@Icons.Material.Sharp.SettingsBackupRestore 
                    OnAdornmentClick=@(() => SetEffMaxValue(Energy.Max)) AdornmentAriaLabel=@l10n["btnReset"]/>
            </MudItem>
        </MudGrid>
    </MudCardContent>

</MudCard>

@code {
    /// <summary>
    /// Data container for the displayed energy.
    /// </summary>
    [Parameter] public EnergyViMo Energy { get; set; }

    /// <summary>
    /// Callback to support two-way binding of <see cref="Energy" />
    /// </summary>
    [Parameter] public EventCallback<EnergyViMo> EnergyChanged { get; set; }



    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        MaxValue = Energy.EffMax;
        EffValue = Energy.EffectiveValue;
    }

    // Variables duplicate values to allow 2-way binding
    private int MaxValue { get; set; }
    private int EffValue { get; set; }



    private void FullyRestore() => SetEffValue(MaxValue);


    private void SetEffValue(int NewValue)
    {
        int NewEff = NewValue;
        if (NewValue < Energy.Min) NewEff = Energy.Min;
        if (NewValue > Energy.EffMax) NewEff = Energy.EffMax;

        EffValue = NewEff;
        Energy.EffectiveValue = EffValue;

        EnergyChanged.InvokeAsync(Energy);
    }



    private void ChangeEffValue(int Delta)
    {
        int NewEff = EffValue + Delta;
        if (NewEff < Energy.Min) NewEff = Energy.Min;
        if (NewEff > Energy.EffMax) NewEff = Energy.EffMax;

        Energy.EffectiveValue = NewEff;
        EffValue = Energy.EffectiveValue;

        EnergyChanged.InvokeAsync(Energy);
    }


    private void SetEffMaxValue(int NewValue)
    {
        if (NewValue <= Energy.Min)
            throw new ArgumentOutOfRangeException(nameof(NewValue),
                "Max energy value cannot go beneath the minimum limit");

        Energy.EffMax = NewValue;
        EffValue = Energy.EffMax;

        EnergyChanged.InvokeAsync(Energy);
    }


    //// RENDERING

    private Adornment ShowResetButton(int EffMax, int Max) =>
        (EffMax != Max) switch
        {
            true => Adornment.End,
            false => Adornment.None
        };


    private RenderFragment EnergyPlusMinus(int Value)
    {
        string IconLabel = Value switch
        {
            -2 => Icons.Material.Sharp.ExposureNeg2,
            -1 => Icons.Material.Sharp.ExposureNeg1,
            1 => Icons.Material.Sharp.ExposurePlus1,
            2 => Icons.Material.Sharp.ExposurePlus2,
            _ => throw new Exception("Energy card: Unknown increment/decrement")
        };
        string Aria = Math.Sign(Value) switch
        {
            -1 => String.Format(l10n["txtEnergyDecrease"], Math.Abs(Value)), //"Reduce by {Math.Abs(Modifier)}",
            1 => String.Format(l10n["txtEnergyIncrease"], Math.Abs(Value)), //$"Increase by {Math.Abs(Modifier)}",
            _ => throw new Exception("Energy card: Unknown increment/decrement")
        };
        return
    @<MudIconButton OnClick=@(() => ChangeEffValue(Value)) Icon=@IconLabel Title=@Aria aria-label=@Aria Size=Size.Large /> 
    @*l10n*@
    ;
    }
}
