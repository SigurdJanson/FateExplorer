@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n

<MudCard Outlined=true Squared=true Class="mb-4">

    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Energy.Name</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudNumericField @bind-Value=EffValue Label="@l10n["lblAvailable"]"
            Variant=Variant.Text Min=@Energy.Min Max=@MaxValue HideSpinButtons=true />
            <MudProgressLinear Color=Color.Primary Size=Size.Small Value=@(EffValue*100/MaxValue) Class="mb-2" />

            <MudText Typo=Typo.caption Align="Align.Center">@l10n["lblCrossedThresholds"]</MudText>
            <div class="d-flex flex-row">
                <MudSpacer/>
                <MudTooltip Text="lblArrowLeft" Style="Width:100%">
                <MudAvatar Color=Color.Primary Square=true>@Energy.CrossedThresholds</MudAvatar>
                </MudTooltip>
                <MudSpacer/>
            </div>
    </MudCardContent>

    <MudCardContent>
        <MudNumericField @bind-Value=MaxValue Label="@l10n["lblMaximum"]"
            Variant=Variant.Text Min=0 HideSpinButtons=true 
            Disabled=false Style="color:black" />
        <MudNumericField Value=@Energy.Min Label="@l10n["lblMinimum"]" 
            Variant=Variant.Text HideSpinButtons=true 
            Disabled=true Style="color:black" />
    </MudCardContent>

    <MudCardActions>
        <MudButtonGroup Color=Color.Primary Variant=Variant.Outlined  VerticalAlign=true>
            <MudButton OnClick=@(() => ChangeEffValue(-1))>-1</MudButton>
            <MudMenu Icon=@Icons.Material.Filled.ArrowDropDown Direction=Direction.Bottom OffsetY=true FullWidth=true>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-2)) >-2</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-3)) >-3</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-4)) >-4</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-5)) >-5</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
        <MudSpacer/>
        <MudButtonGroup Color=Color.Primary Variant=Variant.Outlined  VerticalAlign=true>
            <MudButton OnClick=@(() => ChangeEffValue(1))>+1</MudButton>
            <MudMenu Icon=@Icons.Material.Filled.ArrowDropDown Direction=Direction.Bottom OffsetY=true FullWidth=true>
                <MudMenuItem OnClick=@(() => ChangeEffValue(2))>+2</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(3))>+3</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(4))>+4</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(5))>+5</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudCardActions>

</MudCard>

@code {
    /// <summary>
    /// Data container for the displayed energy.
    /// </summary>
    [Parameter] public EnergyDTO Energy { get; set; }

    /// <summary>
    /// Callback to support two-way binding of <see cref="Energy" />
    /// </summary>
    [Parameter] public EventCallback<EnergyDTO> EnergyChanged { get; set; }


    // Variables duplicate values to allow 2-way binding
    private int MaxValue { get; set; }
    private int EffValue { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        MaxValue = Energy.Max;
        EffValue = Energy.EffectiveValue;
    }



    private void ChangeEffValue(int Delta)
    {
        int NewEff = EffValue + Delta;
        if (NewEff <= MaxValue && Energy.Min <= EffValue)
        {
            EffValue = NewEff;

            //Energy.EffectiveValue = EffValue causes Error CS1612
            EnergyDTO NewEnergy = Energy;
            NewEnergy.EffectiveValue = EffValue;

            EnergyChanged.InvokeAsync(NewEnergy);
        }
    }

}
