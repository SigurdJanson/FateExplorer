@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n

<MudCard Outlined=true Squared=true Class="mb-4">

    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Energy.Name</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <div class="d-flex flex-row">
        <MudIconButton OnClick=@(() => ChangeEffValue(-2)) Icon=@Icons.Material.Sharp.ExposureNeg2 aria-label="Reduce by 2"></MudIconButton> @*l10n*@
        <MudIconButton OnClick=@(() => ChangeEffValue(-1)) Icon=@Icons.Material.Sharp.ExposureNeg1 aria-label="Reduce by 1"></MudIconButton>
        <div>
        <MudNumericField Value=@EffValue ValueChanged=@((int i) => SetEffValue(i)) Label="@l10n["lblAvailable"]"
            Variant=Variant.Text Min=@Energy.Min Max=99 HideSpinButtons=true Style="min-width:4rem;" />
        <MudProgressLinear Color=Color.Primary Size=Size.Small Value=@(EffValue*100/MaxValue) Class="mb-2">
            |
        </MudProgressLinear>
        </div>
        <MudIconButton OnClick=@(() => ChangeEffValue(+1)) Icon=@Icons.Material.Sharp.ExposurePlus1 aria-label="Increase by 1"></MudIconButton>
        <MudIconButton OnClick=@(() => ChangeEffValue(+2)) Icon=@Icons.Material.Sharp.ExposurePlus2 aria-label="Increase by 2"></MudIconButton>
        </div>

        <MudText Typo=Typo.caption Align="Align.Center">@l10n["lblCrossedThresholds"]</MudText>
        <div class="d-flex flex-row">
            <MudSpacer/>
            <MudTooltip Text="lblArrowLeft" Style="Width:100%">
            <MudAvatar Color=Color.Primary Square=true>@Energy.CrossedThresholds</MudAvatar>
            </MudTooltip>
            <MudSpacer/>
        </div>
    </MudCardContent>
    <MudCardActions Class="d-flex justify-center">
        <MudButton OnClick=@FullyRestore Variant=Variant.Outlined Color=Color.Primary>
            @l10n["btnFullyRestore"]
        </MudButton>
    </MudCardActions>

    <MudCardContent>
        <div class="d-flex flex-row">
            <MudNumericField Value=@MaxValue ValueChanged=@((int i) => SetEffMaxValue(i)) Label="@l10n["lblMaximum"]"
                Variant=Variant.Text Min=1 HideSpinButtons=true 
                Disabled=false Style="color:black" />
            @if (Energy.EffMax != Energy.Max) @* The maximum value != the effective Max *@
            {
                <MudIconButton OnClick=@(() => SetEffMaxValue(Energy.Max))
                    Icon=@Icons.Material.Sharp.SettingsBackupRestore Color=Color.Default Size=Size.Small 
                        Title=@l10n["btnReset"] aria-label=@l10n["btnReset"] />
            }
        </div>
        <MudNumericField Value=@Energy.Min Label="@l10n["lblMinimum"]" 
            Variant=Variant.Text HideSpinButtons=true 
            Disabled=true Style="color:black" />
    </MudCardContent>

@*    <MudCardActions>
        <MudButtonGroup Color=Color.Primary Variant=Variant.Outlined  VerticalAlign=true>
            <MudButton OnClick=@(() => ChangeEffValue(-1))>-1</MudButton>
            <MudMenu Icon=@Icons.Material.Sharp.ArrowDropDown Direction=Direction.Bottom OffsetY=true FullWidth=true>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-2)) >-2</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-3)) >-3</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-4)) >-4</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(-5)) >-5</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
        <MudSpacer/>
        <MudButtonGroup Color=Color.Primary Variant=Variant.Outlined  VerticalAlign=true>
            <MudButton OnClick=@(() => ChangeEffValue(1))>+1</MudButton>
            <MudMenu Icon=@Icons.Material.Sharp.ArrowDropDown Direction=Direction.Bottom OffsetY=true FullWidth=true>
                <MudMenuItem OnClick=@(() => ChangeEffValue(2))>+2</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(3))>+3</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(4))>+4</MudMenuItem>
                <MudMenuItem OnClick=@(() => ChangeEffValue(5))>+5</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudCardActions>*@

</MudCard>

@code {
    /// <summary>
    /// Data container for the displayed energy.
    /// </summary>
    [Parameter] public EnergyViMo Energy { get; set; }

    /// <summary>
    /// Callback to support two-way binding of <see cref="Energy" />
    /// </summary>
    [Parameter] public EventCallback<EnergyViMo> EnergyChanged { get; set; }



    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        MaxValue = Energy.EffMax;
        EffValue = Energy.EffectiveValue;
    }

    // Variables duplicate values to allow 2-way binding
    private int MaxValue { get; set; }
    private int EffValue { get; set; }



    private void FullyRestore() => SetEffValue(MaxValue);


    private void SetEffValue(int NewValue)
    {
        int NewEff = NewValue;
        if (NewValue < Energy.Min) NewEff = Energy.Min;
        if (NewValue > Energy.EffMax) NewEff = Energy.EffMax;

        EffValue = NewEff;
        Energy.EffectiveValue = EffValue;

        EnergyChanged.InvokeAsync(Energy);
    }



    private void ChangeEffValue(int Delta)
    {
        int NewEff = EffValue + Delta;
        if (NewEff < Energy.Min) NewEff = Energy.Min;
        if (NewEff > Energy.EffMax) NewEff = Energy.EffMax;

        Energy.EffectiveValue = NewEff;
        EffValue = Energy.EffectiveValue;

        EnergyChanged.InvokeAsync(Energy);
    }


    private void SetEffMaxValue(int NewValue)
    {
        if (NewValue <= Energy.Min)
            throw new ArgumentOutOfRangeException(nameof(NewValue),
                "Max energy value cannot go beneath the minimum limit");

        Energy.EffMax = NewValue;
        EffValue = Energy.EffMax;

        EnergyChanged.InvokeAsync(Energy);
    }
}
