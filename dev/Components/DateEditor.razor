@using FateExplorer.Calendar

@inject IStringLocalizer<App> l10n

<MudDialog>
    <TitleContent>
        <MudText Typo=Typo.h6>@l10n["lblEditDate"]</MudText>
    </TitleContent>
    <DialogContent>
        <div class=@($"d-flex flex-nowrap flex-row flex-grow-1 gap-4")>

            <MudNumericField Value=@InputDay ValueChanged=@OnDayChange Min=1 Max=@MaxDays
                Label=@l10n["lblDateDay"] Format="D2" Pattern="[0-9]" T=int />  

            <MudSelect Value=@InputMonth ValueChanged=@OnMonthChange 
                Label=@l10n["lblDateMonth"] ToStringFunc=@((int i) => $"{Calendar.ListOfMonths[i-1]} ({i})") T=int >
                @for (int i = 1; i <= Calendar.ListOfMonths.Length; i++ ){<MudSelectItem Value=i />}
            </MudSelect>

            <MudNumericField Value=@InputYear ValueChanged=@OnYearChange Min=MinYears
                Label=@l10n["lblDateYear"] Format="D4" Pattern="[0-9\-]" T=int />

        </div>
        <div>
            <MudText Typo=Typo.body2>@Message</MudText>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color=Color.Primary OnClick=@Cancel Class="px-10">@l10n["btnCancel"]</MudButton>
        <MudButton Color=Color.Primary Variant=Variant.Filled OnClick=@Submit Class="px-10">@l10n["btnDateChange"]</MudButton>
    </DialogActions>
</MudDialog>
@*  <MudInput T=string Mask=@(new RegexMask(CalendarViMo.DateRegex)) @bind-Value=dateInputStr
              Placeholder=@l10n["txtDateFormatPlaceholder"] Class=@DateOpenClass />*@


@code {
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    /// <summary>
    /// An aventurian calendar the dates refer to.
    /// </summary>
    [Parameter]
    public CalendarViMo Calendar { get; set; }


    /// <summary>
    /// The current date to be edited
    /// </summary>
    [Parameter]
    public DateTime Date { get; set; }


    /// <summary>
    /// Fired when the Date property changes.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }


    //
    void Submit() => MudDialog.Close(DialogResult.Ok(Calendar.ToDateTime(InputDay, InputMonth, InputYear)));
    void Cancel() => MudDialog.Cancel();


    //
    private int InputDay;
    private int MaxDays;
    private int InputMonth;
    private int InputYear;
    private const int MinYears = -976;

    private string Message = "";


    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Calendar is null) throw new ArgumentNullException(nameof(Calendar));

        InputDay = Calendar.GetDayOfMonth(Date);
        InputMonth = Calendar.GetMonthNr(Date);
        InputYear = Calendar.GetYear(Date);
        MaxDays = Calendar.DaysInMonth(InputYear, InputMonth);
    }

    protected async Task DateHasChanged()
    {
        Message = string.Empty;
        try
        {
            Date = Calendar.ToDateTime(InputDay, InputMonth, InputYear);
        }
        catch(ArgumentOutOfRangeException e)
        {
            if (e.ParamName == "day")
                Message = l10n["msgDayOutOfRange"];
        }

        await DateChanged.InvokeAsync(Date);
    }

    protected async void OnDayChange(int day)
    {
        if (InputDay == day || day == 0) return;
        InputDay = day;
        await DateHasChanged();
    }


    protected async void OnMonthChange(int month)
    {
        if (InputMonth == month) return;
        InputMonth = month;
        MaxDays = Calendar.DaysInMonth(InputYear, InputMonth);
        await DateHasChanged();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="year"></param>
    protected async void OnYearChange(int year)
    {
        if (InputYear == year) return;
        InputYear = year;
        await DateHasChanged();
    }
}