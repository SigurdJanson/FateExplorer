@page "/overview"

@using FateExplorer.Calendar
@using FateExplorer.Components
@using FateExplorer.GameData
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel
@using FateExplorer.Shared
@using System.IO
@using System

@implements IDisposable

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IGameDataService GameData
@inject ITheHeroViMo Hero
@inject IDateOfPlay CurrentDate
@inject IRollHandlerViMo RollHandler

@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12 sm=6 md=5 lg=4>
            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudText Typo=Typo.body1 Class="mb-3">@Hero.Name</MudText>
                <MudGrid>
                    <MudItem xs=6 md=4>
                        <MudText Typo=Typo.caption>@l10n["lblPlaceOfBirth"]</MudText>
                        <MudText Typo=Typo.body2 Class="mb-3">@Hero.PlaceOfBirth</MudText>
                    </MudItem>
                    <MudItem xs=6 md=4>
                        <MudText Typo=Typo.caption>@l10n["lblDateOfBirth"]</MudText>
                        <MudText Typo=Typo.body2>@DateOfBirthStr</MudText>
                    </MudItem>
                    <MudItem xs=6 md=4>
                        <MudText Typo=Typo.caption>@l10n["lblAge"]</MudText>
                        <MudText Typo=Typo.body2>@AgeStr</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>


            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <div>
                @foreach (var ab in Hero.GetAbilites().OrderBy(a => a.Id))
                {
                <AbilityChip Ability=@ab OnClick=@((MouseEventArgs e) => OnAbilityCheck(ab)) />
                }
                </div>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
                @foreach (var r in Hero.GetResiliences())
                {
                    <MudItem xs=6 Class="mb-3">
                        <MudTooltip Text=@r.Name Placement=Placement.Bottom>
                            <MudField Label="@r.ShortName" Variant=Variant.Text DisableUnderLine=true>
                                @r.EffectiveValue @AddMaxResilience(r)
                            </MudField>
                        </MudTooltip>
                    </MudItem>
                }
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
                    <MudItem xs=6 md=4>
                        <MudTooltip Text=@l10n["lblMovement"] Placement=Placement.Bottom>
                            <MudField Label=@l10n["abbrMovement"] Variant=Variant.Text DisableUnderLine=true>
                                @Hero.Movement
                            </MudField>
                        </MudTooltip>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true>
                <MudExpansionPanels DisableBorders=true Elevation=0 MultiExpansion=true >
                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblLanguages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Langs.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Langs.Count; i++)
                                {
                                    @l10n[Langs[i].Name];
                                    if (Langs[i].Tier > LanguageAbility.lngNone) { <span> (@l10n[Langs[i].Tier.ToString()])</span> }
                                    if (i != Langs.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>

                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblSpecialAbilities"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@SpecialAbilities.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < SpecialAbilities.Count; i++)
                                {
                                    @SpecialAbilities[i].Name;
                                    if (SpecialAbilities[i].Tier > 0) {<span> (@SpecialAbilities[i].Tier)</span>};
                                    if (i != SpecialAbilities.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>


                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblAdvantages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Advantages.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Advantages.Count; i++)
                                {
                                    @Advantage(Advantages[i], i < Advantages.Count - 1, false);
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>


                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblDisadvantages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Disadvantages.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Disadvantages.Count; i++)
                                {
                                    @Advantage(Disadvantages[i], i < Disadvantages.Count - 1, true);
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

            </MudPaper>
        </MudItem>

        <MudItem xs=12 sm=6 md=7 lg=8>
            <MudPaper Outlined=false Class="pa-2 d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=Context.FreeModifier ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8" TickMarks=true Size=Size.Small Variant=Variant.Filled>
                    @l10n["lblModifier"] @Context.FreeModifier @(Context.FreeModifier >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>
            <MudPaper Class="pa-2 d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons ShowValueLabel=@l10n["lblAbility"]/>
                    }
                }
                else
                {
                    <MudText Typo=Typo.h5 Align=Align.Center Style=@($"color:{Theme.Palette.TextDisabled}")>
                        @l10n["msgCallToAction4Rolls"].ToString().ToUpper()
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}


@code {
    private MudTheme Theme = new MudTheme(); // Grant access to the theme
    private readonly string[] CheckIcons = new string[4] { 
        Icons.Material.Filled.SentimentVeryDissatisfied, Icons.Material.Filled.Elderly,
        Icons.Material.Filled.Accessibility, IconsFE.Success
    };
    private RollCheckResultViMo ActiveAbilityCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private CheckContextViMo Context { get; set; }


    private CalendarViMo Calendar { get; set; }
    private DateTime DateOfBirth { get; set; }
    private string DateOfBirthStr { get; set; }
    private string AgeStr { get; set; }

    private List<LanguageDTO> langs;
    private List<LanguageDTO> Langs
    {
        get
        {
            if (langs is null || langs.Count == 0)
                langs = Hero.GetLanguages();
            return langs;
        }
    }

    private List<SpecialAbilityDTO> specialAbilities;
    private List<SpecialAbilityDTO> SpecialAbilities
    {
        get
        {
            if (specialAbilities is null || specialAbilities.Count == 0)
                specialAbilities = Hero.GetSpecialAbilities();
            return specialAbilities;
        }
    }


    private List<DisAdvantageDTO> advantages;
    private List<DisAdvantageDTO> Advantages
    {
        get
        {
            if (advantages is null || advantages.Count == 0)
                advantages = Hero.GetAdvantages();
            return advantages;
        }
    }


    private List<DisAdvantageDTO> disadvantages;
    private List<DisAdvantageDTO> Disadvantages
    {
        get
        {
            if (disadvantages is null || disadvantages.Count == 0)
                disadvantages = Hero.GetDisadvantages();
            return disadvantages;
        }
    }


    /// <summary>
    /// Update the fields once the date of play of the app has changed
    /// </summary>
    private void UpdateDate()
    {
        if (Calendar is null) return;

        bool DateHasBeenSet = false;
        try{
            DateOfBirth = Calendar.Parse(Hero.DateOfBirth);
        }
        catch(FormatException)
        {
            DateOfBirthStr = Hero.DateOfBirth;
            AgeStr = "n/a";
            DateHasBeenSet = true;
        }
        // if DateOfBirth has been parsed successfully
        if (!DateHasBeenSet)
        {
            DateOfBirthStr = Calendar.DateToString('p', DateOfBirth);
            AgeStr = BosparanCalendar.AbsDeltaInYears(DateOfBirth, Calendar.EffectiveDate).ToString();
        }
    }







    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);

        Context = new();
        CurrentDate.OnChange += OnDateChanged;
        Calendar = new(GameData.Calendar, CurrentDate);
        UpdateDate();
    }




    /// <summary>Respond to any changes of the character view model</summary>
    protected void OnCharacterHasLoaded()
    {
        UpdateDate();
        StateHasChanged();
    }

    /// <summary>Respond to a change of the current date</summary>
    protected void OnDateChanged()
    {
        UpdateDate();
        StateHasChanged();
    }


    private void OnAbilityCheck(AbilityDTO ability)
    {
        ActiveAbilityCheck = RollHandler.OpenRollCheck(new Check(Check.Roll.Ability), ability, Context, null);
        RollCheckResults.Enqueue(ActiveAbilityCheck);
    }


    private void OnModChanged(int NewValue)
    {
        Context.FreeModifier = NewValue;
        StateHasChanged();
    }


    // IDISPOSABLE

    public void Dispose()
    {
        CurrentDate.OnChange -= OnDateChanged;
    }


    // RENDERING 

    RenderFragment AddMaxResilience(ResilienceDTO r)
    {
        if (r.Max != r.EffectiveValue)
            return 
                @<span>(Original @r.Max)</span>;
        else
            return @<span></span>;
    }
    
    MarkupString Advantage(DisAdvantageDTO da, bool hasSuccessor, bool DisAdvantage)
    {
        string Tiers = da.Tier > 0 ? $" ({da.Tier})" : string.Empty;
        string Sep = hasSuccessor ? $", " : string.Empty;
        if (da.Recognized)
        {
            string Attributes = DisAdvantage ? 
                $" class=\"fe-reco\" title=\"{l10n["txtRecognizedDisdvantage"]}\"" : 
                $" class=\"fe-reco\" title=\"{l10n["txtRecognizedAdvantage"]}\"";
            return (MarkupString)$"<span{Attributes}>{da.Name}{Tiers}</span>{Sep}";
        }
        else
        {
            return (MarkupString)$"<span>{da.Name}{Tiers}</span>{Sep}";
        }
    }
}

