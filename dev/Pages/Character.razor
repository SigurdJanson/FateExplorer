@page "/overview"

@using FateExplorer.Components
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel
@using FateExplorer.Shared
@using System.IO
@using System

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler

@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs=12 sm=6 md=5 lg=4>
            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudText Typo=Typo.body1 Class="mb-3">@Hero.Name</MudText>
                <MudGrid>
                    <MudItem xs=6>
                        <MudText Typo=Typo.caption>@l10n["lblPlaceOfBirth"]</MudText>
                        <MudText Typo=Typo.body2 Class="mb-3">@Hero.PlaceOfBirth</MudText>
                    </MudItem>
                    <MudItem xs=6>
                        <MudText Typo=Typo.caption>@l10n["lblDateOfBirth"]</MudText>
                        <MudText Typo=Typo.body2>@Hero.DateOfBirth</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>


            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <div>
                @foreach (var ab in Hero.GetAbilites())
                {
                <AbilityChip Ability=@ab OnClick=@((MouseEventArgs e) => OnAbilityCheck(ab)) />
                }
                </div>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
                @foreach (var r in Hero.GetResiliences())
                {
                    <MudItem xs=6 Class="mb-3">
                        <MudTooltip Text=@r.Name Placement=Placement.Bottom>
                            <MudField Label="@r.ShortName" Variant=Variant.Text DisableUnderLine=true>
                                @r.EffectiveValue @AddMaxResilience(r)
                            </MudField>
                        </MudTooltip>
                    </MudItem>
                }
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
@*                    <MudItem xs=6 Class="mb-3">
                        <MudField Label=@l10n["lblMovement"] Variant=Variant.Text DisableUnderLine=true>
                            @Hero.Movement()
                        </MudField>
                    </MudItem>
*@                    <MudItem xs=6 Class="mb-3">
                        <MudField Label=@l10n["lblWeight"] Variant=Variant.Text DisableUnderLine=true>
                            @Hero.CarriedWeight.ToString("F2") @l10n["lblWeightUnit"]
                            <MudTooltip Text=@string.Format(l10n["msgCanCarry"], Hero.WhatCanCarry, Hero.WhatCanLift)>
                                <MudIcon Icon=@Icons.Filled.Info Color=Color.Info/>
                            </MudTooltip>
                            @if (Hero.CarriedWeight > Hero.WhatCanCarry)
                            {
                            <MudTooltip Text=@l10n["msgMaxCarryExceeded"]>
                                <MudIcon Icon=@Icons.Filled.Info Color=Color.Error />
                            </MudTooltip>
                            }
                        </MudField>
                    </MudItem>

                    @*<MudItem xs=6 Class="mb-3">
                        <MudField Label=@l10n["lblBelongings"] Variant=Variant.Text DisableUnderLine=true>
                            n/a
                        </MudField>
                    </MudItem>*@
                    <MudItem xs=6 Class="mb-3">
                        <MudField Label=@l10n["lblWealth"] Variant=Variant.Text DisableUnderLine=true>
                            @Hero.FormatMoney()
                        </MudField>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true>
                <MudExpansionPanels DisableBorders=true Elevation=0 MultiExpansion=true >
                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblLanguages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Langs.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Langs.Count; i++)
                                {
                                    @l10n[Langs[i].Name];
                                    if (Langs[i].Tier > LanguageAbility.lngNone) { <span> (@l10n[Langs[i].Tier.ToString()])</span> }
                                    if (i != Langs.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>

                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblSpecialAbilities"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@SpecialAbilities.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < SpecialAbilities.Count; i++)
                                {
                                    @SpecialAbilities[i].Name;
                                    if (SpecialAbilities[i].Tier > 0) {<span> (@SpecialAbilities[i].Tier)</span>};
                                    if (i != SpecialAbilities.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>


                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblAdvantages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Advantages.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Advantages.Count; i++)
                                {
                                    @Advantages[i].Name;
                                    if (Advantages[i].Tier > 0) {<span> (@Advantages[i].Tier)</span>};
                                    if (i != Advantages.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>


                    <MudExpansionPanel HideIcon=true>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Typo=Typo.caption>@l10n["lblDisadvantages"]</MudText>
                                <MudAvatar Color=Color.Tertiary Size=Size.Small Square=true Class="ml-auto">@Disadvantages.Count</MudAvatar>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @{
                                @for(int i = 0; i < Disadvantages.Count; i++)
                                {
                                    @Disadvantages[i].Name;
                                    if (Disadvantages[i].Tier > 0) {<span> (@Disadvantages[i].Tier)</span>};
                                    if (i != Disadvantages.Count-1) {<span>, </span>};
                                }
                            }
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

            </MudPaper>
        </MudItem>

        <MudItem xs=12 sm=6 md=7 lg=8>
            <MudPaper Outlined=false Class="pa-2 d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=ModifyValue ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8" TickMarks=true Size=Size.Small Variant=Variant.Filled>
                    @l10n["lblModifier"] @ModifyValue @(ModifyValue >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>
            <MudPaper Class="pa-2 d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons ShowValueLabel=@l10n["lblAbility"]/>
                    }
                }
                else
                {
                    <MudText Typo=Typo.h5 Align=Align.Center Style=@($"color:{Theme.Palette.TextDisabled}")>
                        @l10n["msgCallToAction4Rolls"].ToString().ToUpper()
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
<SkeletonNoCharacterData OnCharacterHasLoaded=@OnCharacterHasLoaded/>
}

@code {
    private MudTheme Theme = new MudTheme(); // Grant access to the theme
    private readonly string[] CheckIcons = new string[4] { 
        "fe fe-Botch", Icons.Filled.Elderly, 
        Icons.Filled.Accessibility, "fe fe-Success"
    };
    private RollCheckResultViMo ActiveAbilityCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private int ModifyValue { get; set; }

    private List<LanguageDTO> langs;
    private List<LanguageDTO> Langs
    {
        get
        {
            if (langs is null || langs.Count == 0)
                langs = Hero.GetLanguages();
            return langs;
        }
    }

    private List<SpecialAbilityDTO> specialAbilities;
    private List<SpecialAbilityDTO> SpecialAbilities
    {
        get
        {
            if (specialAbilities is null || specialAbilities.Count == 0)
                specialAbilities = Hero.GetSpecialAbilities();
            return specialAbilities;
        }
    }


    private List<DisAdvantageDTO> advantages;
    private List<DisAdvantageDTO> Advantages
    {
        get
        {
            if (advantages is null || advantages.Count == 0)
                advantages = Hero.GetAdvantages();
            return advantages;
        }
    }


    private List<DisAdvantageDTO> disadvantages;
    private List<DisAdvantageDTO> Disadvantages
    {
        get
        {
            if (disadvantages is null || disadvantages.Count == 0)
                disadvantages = Hero.GetDisadvantages();
            return disadvantages;
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);
    }




    /// <summary>Reacts to any changes of the character view model</summary>
    protected void OnCharacterHasLoaded() => StateHasChanged();




    private void OnAbilityCheck(AbilityDTO ability)
    {
        ActiveAbilityCheck = RollHandler.OpenRollCheck(ability.Id, ability, null);
        ActiveAbilityCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveAbilityCheck);
    }


    private void OnModChanged(int NewValue)
    {
        ModifyValue = NewValue;
        ActiveAbilityCheck?.CheckModifier.Set(ModifyValue);
        StateHasChanged();
    }


    // RENDERING 

    RenderFragment AddMaxResilience(ResilienceDTO r)
    {
        if (r.Max != r.EffectiveValue)
            return 
                @<span>(Original @r.Max)</span>;
        else
            return @<span></span>;
    }


}
