@page "/overview"

@using FateExplorer.Components
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel
@using FateExplorer.Shared
@using System.IO
@using System

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler

@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs=12 sm=6 md=5 lg=4>
            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudText Typo=Typo.body1 Class="mb-3">@Hero.Name</MudText>
                <div class="FieldParent">
                    <div class="mr-4 d-block Field" >
                        <MudText Typo=Typo.caption>@l10n["lblPlaceOfBirth"]</MudText>
                        <MudText Typo=Typo.body2 Class="mb-3">@Hero.PlaceOfBirth</MudText>
                    </div>
                    <div class="mr-4 d-block Field">
                        <MudText Typo=Typo.caption>@l10n["lblDateOfBirth"]</MudText>
                        <MudText Typo=Typo.body2>@Hero.DateOfBirth</MudText>
                    </div>
                </div>
            </MudPaper>


            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <div>
                @foreach (var ab in Hero.GetAbilites())
                {
                <AbilityChip Ability=@ab OnClick=@((MouseEventArgs e) => OnAbilityCheck(ab)) />
                }
                </div>
            </MudPaper>

@*          <MudText Typo=Typo.caption>@r.ShortName @AddMaxResilience(r)</MudText>
            <MudText Typo=Typo.body1>@r.EffectiveValue</MudText>*@

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
                @foreach (var r in Hero.GetResiliences())
                {
                    <MudItem xs=6 Class="mb-3">
                        <MudTooltip Text=@r.Name Placement=Placement.Bottom>
                            <MudField Label="@r.ShortName" Variant=Variant.Text DisableUnderLine=true>
                                @r.EffectiveValue @AddMaxResilience(r)
                            </MudField>
                        </MudTooltip>
                    </MudItem>
                }
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudGrid>
                    <MudItem xs=6 Class="mb-3">
                    <MudField Label=@l10n["lblBelongings"] Variant=Variant.Text DisableUnderLine=true>
                        n/a
                    </MudField>
                    </MudItem>

                    <MudItem xs=6 Class="mb-3">
                    <MudField Label=@l10n["lblWeight"] Variant=Variant.Text DisableUnderLine=true>
                        @Hero.CarriedWeight.ToString("F2") @l10n["lblWeightUnit"]
                        <MudTooltip Text=@string.Format(l10n["msgCanCarry"], Hero.WhatCanCarry, Hero.WhatCanLift)>
                            <MudIcon Icon=@Icons.Filled.Info Color=Color.Info/>
                        </MudTooltip>
                        @if (Hero.CarriedWeight > Hero.WhatCanCarry)
                        {
                        <MudTooltip Text=@l10n["msgMaxCarryExceeded"]>
                            <MudIcon Icon=@Icons.Filled.Info Color=Color.Error />
                        </MudTooltip>
                        }
                    </MudField>
                    </MudItem>

                    <MudItem xs=6 Class="mb-3">
                    <MudField Label=@l10n["lblWealth"] Variant=Variant.Text DisableUnderLine=true>
                        n/a
                    </MudField>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation=0 Outlined=true Class="pa-4">
                <MudText Typo=Typo.caption>@l10n["lblLanguages"]</MudText>
                <MudText Typo=Typo.body2 Class="mb-3">
                @{
                    var Langs = Hero.GetLanguages();
                    @for(int i = 0; i < Langs.Count; i++)
                    {
                            @Langs[i].Name;
                            <span> (@Langs[i].Tier.ToString())</span>
                            if (i != Langs.Count-1) {<span>, </span>};
                    }
                }
                </MudText>
                
                <MudText Typo=Typo.caption>@l10n["lblSpecialAbilities"]</MudText>
                <MudText Typo=Typo.body2 Class="mb-3">
                @{
                    var SpecialAbilities = Hero.GetSpecialAbilities();
                    @for(int i = 0; i < SpecialAbilities.Count; i++)
                    {
                            @SpecialAbilities[i].Name;
                            if (SpecialAbilities[i].Tier > 0) {<span>, </span>};
                            if (i != SpecialAbilities.Count-1) {<span>, </span>};
                    }
                }
                </MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs=12 sm=6 md=7 lg=8>
            <MudPaper Square=true Outlined=false Class="d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=ModifyValue ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8">
                    @l10n["lblModifier"] @ModifyValue @(ModifyValue >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons ShowValueLabel=@l10n["lblAbility"]/>
                    }
                }
                else
                {
                    <span>Roll something</span>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
<SkeletonNoCharacterData OnCharacterHasLoaded=@OnCharacterHasLoaded/>
}

@code {
    private readonly string[] CheckIcons = new string[4] { Icons.Filled.Accessible, Icons.Filled.Elderly, Icons.Filled.Accessibility, Icons.Filled.AccessibilityNew };

    private RollCheckResultViMo ActiveAbilityCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private int ModifyValue { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);
    }

    /// <summary>Reacts to any changes of the character view model</summary>
    protected void OnCharacterHasLoaded() => StateHasChanged();




    private void OnAbilityCheck(AbilityDTO ability)
    {
        ActiveAbilityCheck = RollHandler.OpenRollCheck(ability.Id, ability, null);
        ActiveAbilityCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveAbilityCheck);
    }


    private void OnModChanged(int NewValue)
    {
        ModifyValue = NewValue;
        ActiveAbilityCheck?.CheckModifier.Set(ModifyValue);
        StateHasChanged();
    }


    RenderFragment AddMaxResilience(ResilienceDTO r)
    {
        if (r.Max != r.EffectiveValue)
            return 
                @<span>(Original @r.Max)</span>;
        else
            return @<span></span>;
    }
}
