@page "/Fight"

@using FateExplorer.Components
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler


@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12 sm=6 md=4>
            <MudList Clickable=true>
                <MudListItem Text="Dodge" Icon=@Icons.Material.Filled.PersonOff DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@l10n["Dodge"]</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>@l10n["lblDodgeAbbr"] @Hero.GetDodge().EffectiveValue @Hero.GetDodge().Id</MudText>
                        </div>
                    <MudSpacer/>
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Edit
                        aria-label=@(l10n["lblEdit"] + " " + @l10n["Dodge"]) />
                    <MudSpacer/>
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Casino
                        OnClick=@(() => OnDodgeCheck(Hero.GetDodge()))
                        aria-label=@(l10n["lblRoll"] + " " + @l10n["Dodge"]) />
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Visibility
                        aria-label=@(l10n["lblView"] + " " + @l10n["Dodge"]) />
                    </div>
                </MudListItem>
                <MudListItem Text="Initiative" Icon=@Icons.Material.Filled.Sort>
                         
                </MudListItem>
            </MudList>

            <MudDivider />

            <MudList Clickable=true>
                @foreach (var w in Hero.Weapons)
                {
                <MudListItem Text=@w.Name DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@w.Name</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>
                            @l10n["abbrvAttack"] @w.AtSkill - @l10n["abbrvParry"] @w.PaSkill - @w.DamageDieCount@l10n["abbrvDie"]@w.DamageDieSides + @w.DamageBonus
                        </MudText>
                        </div>
                        <MudSpacer/>
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Carpenter
                            OnClick=@(() => OnAttackCheck(w))
                            aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                        @if (w.CanParry)
                        {
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Shield
                            OnClick=@(() => OnParryCheck(w))
                            aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                        }
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Visibility
                            aria-label=@(l10n["lblView"] + " " + @l10n["Attack"]) />
                    </div>
                </MudListItem>
                }
            </MudList>

        </MudItem>
        <MudItem  xs=12 sm=6 md=8>
            <MudPaper >
                <MudGrid>
                    <MudItem xs=6>
                        <MudCard Square=true >
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo=Typo.body2 GutterBottom=false>Dominant hand</MudText>
                                    <MudText Typo=Typo.body1 GutterBottom=false>@Hero.DominantHandWeapon.Name</MudText>
                                    <MudText Typo=Typo.body2 GutterBottom=false>
                                        @l10n["abbrvAttack"] @Hero.DominantHandWeapon.AtSkill - 
                                        @l10n["abbrvParry"] @Hero.DominantHandWeapon.PaSkill - 
                                        @Hero.DominantHandWeapon.DamageDieCount@l10n["abbrvDie"]@Hero.DominantHandWeapon.DamageDieSides + @Hero.DominantHandWeapon.DamageBonus
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon=@Icons.Material.Filled.Close Color=Color.Default />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardActions>
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Carpenter
                                    OnClick=@(() => OnAttackCheck(Hero.DominantHandWeapon))
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                                @if (Hero.DominantHandWeapon.CanParry)
                                {
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Shield
                                    OnClick=@(() => OnParryCheck(Hero.DominantHandWeapon))
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                                }
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Visibility
                                    aria-label=@(l10n["lblView"] + " " + @l10n["Attack"]) />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs=6>
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo=Typo.body2 GutterBottom=false>Non-dominant hand</MudText>
                                    <MudText Typo=Typo.body1 GutterBottom=false>@Hero.NondominantHandWeapon.Name</MudText>
                                    <MudText Typo=Typo.body2 GutterBottom=false>
                                        @l10n["abbrvAttack"] @Hero.NondominantHandWeapon.AtSkill - 
                                        @l10n["abbrvParry"] @Hero.NondominantHandWeapon.PaSkill - 
                                        @Hero.NondominantHandWeapon.DamageDieCount@l10n["abbrvDie"]@Hero.NondominantHandWeapon.DamageDieSides + @Hero.NondominantHandWeapon.DamageBonus
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon=@Icons.Material.Filled.Close Color=Color.Default />
                                </CardHeaderActions>
                             </MudCardHeader>
                            <MudCardActions>
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Carpenter
                                    OnClick=@(() => OnAttackCheck(Hero.NondominantHandWeapon))
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                                @if (Hero.NondominantHandWeapon.CanParry)
                                {
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Shield
                                    OnClick=@(() => OnParryCheck(Hero.NondominantHandWeapon))
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                                }
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Filled.Visibility
                                    aria-label=@(l10n["lblView"] + " " + @l10n["Attack"]) />
                            </MudCardActions>                        
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudPaper Square=true Outlined=false Elevation=0 Class="d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=ModifyValue ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8">
                    @l10n["lblModifier"] @ModifyValue @(ModifyValue >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons ShowValueLabel=@l10n["lblAbility"]/>
                    }
                }
                else
                {
                    <span>Roll something</span>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
    <SkeletonNoCharacterData OnCharacterHasLoaded=LoadHeroData />
}


@code {
    private readonly string[] CheckIcons = new string[4] { Icons.Filled.Accessible, Icons.Filled.Elderly, Icons.Filled.Accessibility, Icons.Filled.AccessibilityNew };

    private RollCheckResultViMo ActiveCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private int ModifyValue { get; set; }

    private void OnDodgeCheck(DodgeDTO dodge)
    {
        ActiveCheck = RollHandler.OpenRollCheck(dodge.Id, dodge, null);
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }

    private void OnAttackCheck(WeaponViMo weapon)
    {
        const string ActionId = "AT"; /// TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(weapon.CombatTechId, ActionId, weapon);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }

    private void OnParryCheck(WeaponViMo weapon)
    {
        const string ActionId = "PA"; /// TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(weapon.CombatTechId, ActionId, weapon);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }



    private void OnModChanged(int NewValue)
    {
        ModifyValue = NewValue;
        ActiveCheck?.CheckModifier.Set(ModifyValue);
        //-StateHasChanged();
    }

    private void LoadHeroData()
    {
        if (Hero.HasBorn)
        {
            // Get all weapons
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);
        LoadHeroData();
    }


    RenderFragment<string[]> AttrHead = Name => __builder =>
    {
        if (Name is not null)
        {
            foreach (var n in Name)
            {
            <td><MudText Typo=Typo.caption>@n</MudText></td>
            }
        }
    };
}