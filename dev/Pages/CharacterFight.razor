@page "/Fight"

@using FateExplorer.Components
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AppSettings Config
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler


@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12 sm=12 md=4>
            <MudPaper Elevation=0 Outlined=true>
            <MudList Clickable=true>
                <MudListItem Icon=@Icons.Material.Sharp.PersonOff DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@l10n[ResourceId.DodgeLabelId]</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>
                            @l10n["abbrDodge"] @Hero.GetDodge().EffectiveValue
                        </MudText>
                        </div>
                    <MudSpacer/>
                    @*<MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Edit
                        aria-label=@(l10n["lblEdit"] + " " + @l10n[ResourceId.DodgeLabelId]) />
                    <MudSpacer/>*@
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Casino
                        OnClick=@(() => OnDodgeCheck(Hero.GetDodge()))
                        Title=@l10n["lblDoRoll"]
                        aria-label=@(l10n["lblRoll"] + " " + @l10n[ResourceId.DodgeLabelId]) />
                    @*<MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
                        aria-label=@(l10n["lblView"] + " " + @l10n[ResourceId.DodgeLabelId]) />*@
                    </div>
                </MudListItem>

                <MudListItem Icon=@Icons.Material.Sharp.Sort DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@l10n[ResourceId.IniLabelId]</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>
                            @l10n["abbrInitiative"] @Hero.GetInitiative().EffectiveValue
                        </MudText>
                        </div>
                    <MudSpacer/>
                    @*<MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Edit
                        aria-label=@(l10n["lblEdit"] + " " + @l10n[ResourceId.DodgeLabelId]) />
                    <MudSpacer/>*@
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Casino
                        OnClick=@(() => OnInitiativeCheck(Hero.GetInitiative()))
                        Title=@l10n["lblDoRoll"]
                        aria-label=@(l10n["lblDoRoll"] + " " + @l10n[ResourceId.IniLabelId]) />
                    @*<MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
                        aria-label=@(l10n["lblView"] + " " + @l10n[ResourceId.DodgeLabelId]) />*@
                    </div>
                </MudListItem>
            </MudList>

            <MudDivider />

            <MudList Clickable=true>
                @foreach (var w in Hero.Weapons)
                {
                @if (w.IsImprovised && !Config.ShowImprovisedWeapons) continue;

                <MudListItem DisableRipple=true> 
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@w.Name</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>
                            @BaseWeaponProps(w)
                        </MudText>
                        </div>
                        <MudSpacer/>
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.FrontHand
                            OnClick=@(() => GrabWeapon(w, true))
                            Title=@l10n["lblPickItemWithDominantHand"]
                            aria-label=@l10n["lblPickItemWithDominantHand"] />
                        <MudIconButton Color=Color.Dark Icon=@IconsFE.BackHandLeft
                            OnClick=@(() => GrabWeapon(w, false))
                            Disabled=w.IsTwohanded
                            Title=@l10n["lblPickItemWithNondominantHand"]
                            aria-label=@l10n["lblPickItemWithNondominantHand"] />
                    </div>
                </MudListItem>
                }
            </MudList>
            </MudPaper>
        </MudItem>


        <MudItem xs=12 sm=12 md=8>
            <MudPaper Class="pa-2">
                <MudGrid>
                    <MudItem xs=6>
                        <CombatHand 
                            HeroHands=Hero.Hands WhichHand=HandsViMo.Hand.Main
                            CombatStyles=@Hero.GetCombatStyleSpecialAbilities(Hero.Hands.MainWeapon.CombatTechId)
                            OnAttackCheck=@(CheckId => OnAttackCheck(CheckId, Hero.Hands.MainWeapon, true))
                            OnParryCheck=@(CheckId => OnParryCheck(CheckId, Hero.Hands.MainWeapon, true))
                                    StashWeapon=@(() => StashWeapon(HandsViMo.Hand.Main)) />
                    </MudItem>
                    <MudItem xs=6>
                        <CombatHand 
                            HeroHands=Hero.Hands WhichHand=HandsViMo.Hand.Off 
                            CombatStyles=@Hero.GetCombatStyleSpecialAbilities(Hero.Hands.OffWeapon.CombatTechId)
                            OnAttackCheck=@(CheckId => OnAttackCheck(CheckId, Hero.Hands.OffWeapon, false)) 
                            OnParryCheck=@(CheckId => OnParryCheck(CheckId, Hero.Hands.OffWeapon, false))
                            StashWeapon=@(() => StashWeapon(HandsViMo.Hand.Off)) />
                    </MudItem>
                </MudGrid>
            </MudPaper>


            <MudPaper Outlined=false Elevation=0 Class="pa-2 d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=ModifyValue ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8" TickMarks=true Size=Size.Small Variant=Variant.Filled>
                    @l10n["lblModifier"] @ModifyValue @(ModifyValue >= 0 ? "Bonus" : "Malus")
                </MudSlider>
                <MudIconButton OnClick=OnComputeCombatMods aria-label=@l10n["lblCombatModBtn"] aria-haspopup="dialog"
                            Icon=@Icons.Material.Filled.SwitchAccessShortcutAdd Variant=Variant.Outlined Color=Color.Primary Size=Size.Small />
            </MudPaper>
            <MudPaper Class="pa-2 d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons /> @* ShowValueLabel=@l10n["lblAbility"] *@
                    }
                }
                else
                {
                    <MudText Typo=Typo.h5 Align=Align.Center Style=@($"color:{Theme.Palette.TextDisabled}")>
                        @l10n["msgCallToAction4Rolls"].ToString().ToUpper()
                    </MudText>                
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
    <SkeletonNoCharacterData OnCharacterHasLoaded=LoadHeroData />
}


@code {
    private MudTheme Theme = new MudTheme(); // Grant access to the theme

    private readonly string[] CheckIcons = new string[4] { 
        IconsFE.Botch,
        Icons.Filled.Elderly, 
        Icons.Filled.Accessibility, 
        IconsFE.Success};

    private BattlegroundViMo Context { get; set; }
    private RollCheckResultViMo ActiveCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private int ModifyValue { get; set; }


    /// <summary>
    /// User puts a weapon into a character's hand'
    /// </summary>
    /// <param name="weapon">The weapon</param>
    /// <param name="MainHand">The designated hand</param>
    private void GrabWeapon(WeaponViMo weapon, bool MainHand)
    {
        if (MainHand)
        {
            Hero.Hands.MainWeapon = weapon;
        }
        else
        {
            Hero.Hands.OffWeapon = weapon;
        }
    }

    /// <summary>
    /// User puts a Weapon away and uses his/her bare hands.
    /// </summary>
    /// <param name="Hand">The designated hand</param>
    private void StashWeapon(HandsViMo.Hand Hand) => Hero.Hands.RemoveWeapon(Hand);



    /// <summary>
    /// Wraps access to the weapons branch
    /// </summary>
    /// <param name="MainHand">Ask for main hand weapon (true) or off-hand weapon</param>
    /// <returns>The combat branch of the weapon in the requested hand</returns>
    private CombatBranch GetCombatBranch(bool MainHand)
        => MainHand ? Hero.Hands.MainWeapon.Branch : Hero.Hands.OffWeapon.Branch;


    /// <summary>
    /// User triggers a combat attack action
    /// </summary>
    /// <param name="weapon">Wielded weapon for this attack</param>
    /// <param name="MainHand">THe hand the character holds the weapon with</param>
    private void OnAttackCheck(Check ActionId, WeaponViMo weapon, bool MainHand)
    {
        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(ActionId, Hero.Hands, MainHand, Context);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        RollCheckResults.Enqueue(ActiveCheck);
    }

    /// <summary>
    /// User triggers a combat parry action
    /// </summary>
    /// <param name="weapon">Wielded Weapon for this attack</param>
    /// <param name="MainHand">THe hand the character holds the Weapon with</param>
    private void OnParryCheck(Check ActionId, WeaponViMo weapon, bool MainHand)
    {
        //Check ActionId = new(Check.Combat.Parry, Weapon.CombatTechId);
        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(ActionId, Hero.Hands, MainHand, Context);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        RollCheckResults.Enqueue(ActiveCheck);
    }


    /// <summary>
    /// User has the character dodge something
    /// </summary>
    /// <param name="dodge"></param>
    private void OnDodgeCheck(CharacterAttrDTO dodge)
    {
        bool Barehands = Hero.Hands.IsBare(HandsViMo.Hand.Main) && Hero.Hands.IsBare(HandsViMo.Hand.Off);
        ActiveCheck = RollHandler.OpenDodgeRollCheck(new Check(Check.Roll.Dodge), dodge, Context, !Barehands);
        RollCheckResults.Enqueue(ActiveCheck);
    }


    /// <summary>
    /// Character needs to show initiative
    /// </summary>
    /// <param name="initiative"></param>
    private void OnInitiativeCheck(CharacterAttrDTO initiative)
    {
        ActiveCheck = RollHandler.OpenRollCheck(new Check(Check.Roll.Initiative), initiative, Context);
        RollCheckResults.Enqueue(ActiveCheck);
    }


    /// <summary>
    /// Responds to setting the free modifier.
    /// </summary>
    /// <param name="NewValue">A user-defined additive modifier</param>
    private void OnModChanged(int NewValue)
    {
        ModifyValue = NewValue;
        Context.FreeModifier = ModifyValue;
    }

    /// <summary>
    /// Opens a <see cref="DlgCombatMods">Combat Modifier Dialog</see>
    /// </summary>
    private async Task OnComputeCombatMods()
    {
        var parameters = new DialogParameters { ["Weapon"] = Hero.Hands.MainWeapon, ["Hero"] = Hero.Name };
        //DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<DlgCombatMods>(l10n["lblCombatMod"], parameters); // , maxWidth
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //----Hero.Money = (decimal)result.Data;
        }
    }


    private void LoadHeroData()
    {
        if (Hero.HasBorn)
        {
            // Get all weapons
        }
    }



    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);
        LoadHeroData();
        Context ??= new();
    }






    #region RENDERING /// /// ///
    
    
    private RenderFragment BaseWeaponProps(WeaponViMo Weapon)
    {
        if (Weapon.DamageBonus == 0)
            return 
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.BaseAtSkill)
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.BasePaSkill)
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides
                </span>;
        else
            return
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.BaseAtSkill)
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.BasePaSkill)
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides + @Weapon.DamageBonus
                </span>;
    }



    private int HandCardElevation(HandsViMo Hands, HandsViMo.Hand Which)
    {
        if (Hands?.IsBare(Which) ?? true)
            return 0;
        else
            return 3;
    }

    #endregion

}
