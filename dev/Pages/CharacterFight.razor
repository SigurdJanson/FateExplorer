@page "/Fight"

@using FateExplorer.Components
@using FateExplorer.RollLogic
@using FateExplorer.ViewModel

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler


@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12 sm=6 md=4>
            <MudList Clickable=true>
                <MudListItem Text="Dodge" Icon=@Icons.Material.Sharp.PersonOff DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@l10n["Dodge"]</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>@l10n["lblDodgeAbbr"] @Hero.GetDodge().EffectiveValue @Hero.GetDodge().Id</MudText>
                        </div>
                    <MudSpacer/>
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Edit
                        aria-label=@(l10n["lblEdit"] + " " + @l10n["Dodge"]) />
                    <MudSpacer/>
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Casino
                        OnClick=@(() => OnDodgeCheck(Hero.GetDodge()))
                        aria-label=@(l10n["lblRoll"] + " " + @l10n["Dodge"]) />
                    <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
                        aria-label=@(l10n["lblView"] + " " + @l10n["Dodge"]) />
                    </div>
                </MudListItem>
                <MudListItem Text="Initiative" Icon=@Icons.Material.Sharp.Sort>
                    
                </MudListItem>
            </MudList>

            <MudDivider />

            <MudList Clickable=true>
                @foreach (var w in Hero.Weapons)
                {
                <MudListItem Text=@w.Name DisableRipple=true>
                    <div class="d-flex align-center" >
                        <div>
                        <MudText Typo=Typo.body1 GutterBottom=false>@w.Name</MudText>
                        <MudText Typo=Typo.body2 GutterBottom=false>
                            @BaseWeaponProps(w)
                        </MudText>
                        </div>
                        <MudSpacer/>
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.FrontHand
                            OnClick=@(() => GrabWeapon(w, true))
                            aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                        <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.BackHand
                            OnClick=@(() => GrabWeapon(w, false))
                            Disabled=w.IsTwohanded
                            aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                    </div>
                </MudListItem>
                }
            </MudList>

        </MudItem>
        <MudItem  xs=12 sm=6 md=8>
            <MudPaper >
                <MudGrid>
                    <MudItem xs=6>
                        <MudCard Square=true Class="mb-4">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo=Typo.body2 GutterBottom=false Color=Color.Secondary>Dominant hand</MudText>
                                    <MudText Typo=Typo.body1 GutterBottom=false>@Hero.Hands.MainWeapon.Name</MudText>
                                    <MudText Typo=Typo.body2 GutterBottom=false>@CarriedWeaponProps(Hero.Hands.MainWeapon, HandsViMo.Hand.Main)</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @if (!Hero.Hands.IsBare(HandsViMo.Hand.Main))
                                    {
                                    <MudIconButton Icon=@Icons.Material.Sharp.Close Color=Color.Default  
                                        OnClick=@(() => StashWeapon(true))/>
                                    }
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardActions>
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Carpenter
                                    OnClick=@(() => OnAttackCheck(Hero.Hands.MainWeapon, true))
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Main)
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                                @if (Hero.Hands.MainWeapon.CanParry)
                                {
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Shield
                                    OnClick=@(() => OnParryCheck(Hero.Hands.MainWeapon, true))
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Main)
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                                }
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Main)
                                    aria-label=@(l10n["lblView"] + " " + @l10n["Attack"]) />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                    <MudItem xs=6>
                        <MudCard Square=true Class="mb-4">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo=Typo.body2 GutterBottom=false Color=Color.Secondary>Non-dominant hand</MudText>
                                    <MudText Typo=Typo.body1 GutterBottom=false>@Hero.Hands.OffWeapon.Name</MudText>
                                    <MudText Typo=Typo.body2 GutterBottom=false>@CarriedWeaponProps(Hero.Hands.OffWeapon, HandsViMo.Hand.Off)</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @if (!Hero.Hands.IsBare(HandsViMo.Hand.Off))
                                    {
                                    <MudIconButton Icon=@Icons.Material.Sharp.Close Color=Color.Default 
                                        OnClick=@(() => StashWeapon(false))/>
                                    }
                                </CardHeaderActions>
                             </MudCardHeader>
                            <MudCardActions>
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Carpenter
                                    OnClick=@(() => OnAttackCheck(Hero.Hands.OffWeapon, false))
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Off)
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Attack"]) />
                                @if (Hero.Hands.OffWeapon.CanParry)
                                {
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Shield
                                    OnClick=@(() => OnParryCheck(Hero.Hands.OffWeapon, false))
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Off)
                                    aria-label=@(l10n["lblRoll"] + " " + @l10n["Parry"]) />
                                }
                                <MudIconButton Color=Color.Dark Icon=@Icons.Material.Sharp.Visibility
                                    Disabled=Hero.Hands.IsDisabled(HandsViMo.Hand.Off)
                                    aria-label=@(l10n["lblView"] + " " + @l10n["Attack"]) />
                            </MudCardActions>                        
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudPaper Square=true Outlined=false Elevation=0 Class="d-flex justify-space-around">
                <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=ModifyValue ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8">
                    @l10n["lblModifier"] @ModifyValue @(ModifyValue >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons ShowValueLabel=@l10n["lblAbility"]/>
                    }
                }
                else
                {
                    <span>Roll something</span>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
    <SkeletonNoCharacterData OnCharacterHasLoaded=LoadHeroData />
}


@code {
    private readonly string[] CheckIcons = new string[4] { 
        Icons.Filled.Accessible, Icons.Filled.Elderly, Icons.Filled.Accessibility, Icons.Filled.AccessibilityNew };

    private RollCheckResultViMo ActiveCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private int ModifyValue { get; set; }


    /// <summary>
    /// User puts a weapon into a character's hand'
    /// </summary>
    /// <param name="weapon">The weapon</param>
    /// <param name="MainHand">The designated hand</param>
    private void GrabWeapon(WeaponViMo weapon, bool MainHand)
    {
        if (MainHand)
            Hero.Hands.MainWeapon = weapon;
        else
            Hero.Hands.OffWeapon = weapon;
    }


    /// <summary>
    /// User empties a hand
    /// </summary>
    /// <param name="MainHand">The hand to empty</param>
    private void StashWeapon(bool MainHand) 
        => Hero.Hands.RemoveWeapon(MainHand ? HandsViMo.Hand.Main : HandsViMo.Hand.Off);


    /// <summary>
    /// 
    /// </summary>
    /// <param name="MainHand"></param>
    /// <returns></returns>
    private CombatBranch GetCombatBranch(bool MainHand)
        => MainHand ? Hero.Hands.MainWeapon.Branch : Hero.Hands.OffWeapon.Branch;


    /// <summary>
    /// User triggers a combat attack action
    /// </summary>
    /// <param name="weapon">Wielded weapon for this attack</param>
    /// <param name="MainHand">THe hand the character holds the weapon with</param>
    private void OnAttackCheck(WeaponViMo weapon, bool MainHand)
    {
        const string ActionId = "AT"; // TODO no string typed APIs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        
        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(ActionId, weapon, Hero.Hands);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }

    /// <summary>
    /// User triggers a combat parry action
    /// </summary>
    /// <param name="weapon">Wielded weapon for this attack</param>
    /// <param name="MainHand">THe hand the character holds the weapon with</param>
    private void OnParryCheck(WeaponViMo weapon, bool MainHand)
    {
        const string ActionId = "PA"; // TODO no string typed APIs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        try
        {
            ActiveCheck = RollHandler.OpenCombatRollCheck(ActionId, weapon, Hero.Hands);
        }
        catch (NotImplementedException)
        {
            Snackbar.Add(string.Format(l10n["msgCombatActionMissing"], ActionId, weapon.Name), Severity.Error);
            return;
        }
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }


    /// <summary>
    /// User has the character dodge something
    /// </summary>
    /// <param name="dodge"></param>
    private void OnDodgeCheck(DodgeDTO dodge)
    {
        ActiveCheck = RollHandler.OpenRollCheck(dodge.Id, dodge, null);
        ActiveCheck.CheckModifier.Set(ModifyValue);
        RollCheckResults.Enqueue(ActiveCheck);
    }





    private void OnModChanged(int NewValue)
    {
        ModifyValue = NewValue;
        ActiveCheck?.CheckModifier.Set(ModifyValue);
        //-StateHasChanged();
    }

    private void LoadHeroData()
    {
        if (Hero.HasBorn)
        {
            // Get all weapons
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (RollCheckResults is null)
            RollCheckResults = new(4);
        LoadHeroData();
    }



    #region RENDERING /// /// ///
    
    
    private RenderFragment BaseWeaponProps(WeaponViMo Weapon)
    {
        if (Weapon.DamageBonus == 0)
            return 
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.BaseAtSkill)
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.BasePaSkill)
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides
                </span>;
        else
            return
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.BaseAtSkill)
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.BasePaSkill)
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides + @Weapon.DamageBonus
                </span>;
    }


    private RenderFragment CarriedWeaponProps(WeaponViMo Weapon, HandsViMo.Hand CarriedBy)
    {
        var OtherWeapon = CarriedBy == HandsViMo.Hand.Main ? Hero.Hands.OffWeapon : Hero.Hands.MainWeapon;
        if (Weapon.DamageBonus == 0)
            return 
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.AtSkill(Hero.Hands, OtherWeapon.Branch))
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.PaSkill(Hero.Hands, OtherWeapon.Branch))
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides
                </span>;
        else
            return
                @<span>
                &#x2694; @l10n["abbrvAttack"] @(Weapon.AtSkill(Hero.Hands, OtherWeapon.Branch))
                &#x1f6e1; @l10n["abbrvParry"] @(Weapon.PaSkill(Hero.Hands, OtherWeapon.Branch))
                &#x27B9; @(Weapon.DamageDieCount)@l10n["abbrvDie"]@Weapon.DamageDieSides + @Weapon.DamageBonus
                </span>;
    }

    #endregion

}