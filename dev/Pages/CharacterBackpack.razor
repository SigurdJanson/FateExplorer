@page "/backpack"

@using FateExplorer.ViewModel;
@using FateExplorer.Components

@inject IStringLocalizer<App> l10n
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero


@if (Hero.HasBorn)
{
<ContentSideBar>
    <Sidebar>
    <MudGrid>
        <MudItem xs=12 md=6 lg=4 Class="mb-3">
            <MudField Label=@l10n["lblWeight"] Variant=Variant.Text UnderLine=false>
                @Hero.CarriedWeight.ToString("F2") @l10n["lblWeightUnit"]
                <MudTooltip Text=@string.Format(l10n["msgCanCarry"], Hero.WhatCanCarry, Hero.WhatCanLift)>
                    <MudIcon Icon=@Icons.Material.Filled.Info Color=Color.Info />
                </MudTooltip>
                @if (Hero.CarriedWeight > Hero.WhatCanCarry)
                {
                    <MudTooltip Text=@l10n["msgMaxCarryExceeded"]>
                        <MudIcon Icon=@Icons.Material.Filled.Info Color=Color.Error />
                    </MudTooltip>
                }
            </MudField>
        </MudItem>
        <MudItem xs=12 md=6 lg=4 Class="mb-3">
            <MudField Label=@l10n["lblWealth"] Variant=Variant.Text UnderLine=false>
                @Hero.FormatMoney()
                <MudIconButton OnClick=OnEditMoney aria-label=@l10n["lblEditCash"] aria-haspopup="dialog"
                                Icon=@Icons.Material.Sharp.CurrencyExchange Variant=Variant.Outlined Color=Color.Primary Size=Size.Small />
            </MudField>
        </MudItem>

        <MudItem xs=12 md=6 lg=4 Class="mb-3">
            <MudField Label=@l10n["lblAssetValue"] Variant=Variant.Text UnderLine=false>
                @Hero.AssetValue.ToString("N2") @l10n["abbrSilverthaler"] @*TODO: Use `Money.Format(...)` here*@
            </MudField>
        </MudItem>

        <MudItem xs=12 Class="mb-3">
            <MudText Typo=Typo.body1 Class="mb-3">@l10n["hBelongings"]</MudText>
            <MudTextField @bind-Value=@SearchTerm Placeholder=@l10n["lblSearch"]
                            AdornmentIcon=@Icons.Material.Filled.Search
                            Adornment=Adornment.End Immediate=true IconSize=Size.Medium AutoFocus=true
                            Clearable=true OnKeyUp=@OnSearchFieldKey />
            <MudList T=string ReadOnly=false>
                @foreach (var i in Hero.GetBelongings())
                {
                    @if (i.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase))
                    {
                        <MudListItem Ripple=false Gutters=false Icon=@GroupIcon(i.Group) IconColor=Color.Dark>
                            <MudText Typo=Typo.body1 GutterBottom=false>
                                <MudHighlighter Text=@i.Name HighlightedText=@SearchTerm
                                                Class="mud-primary-text fe-searchhighlight" /> [<span>@i.Amount</span>]
                            </MudText>
                            <MudText Typo=Typo.body2 GutterBottom=false>
                                <span>@i.Weight Stn</span><span>&nbsp;·&nbsp</span><span>@l10n["lblPrice"] @i.Price @l10n["abbrSilverthaler"]</span>
                            </MudText>
                        </MudListItem>
                    }
                }
                <MudListItem Icon=@IconsFE.Flail Text=@l10n["lblWeapon"] Expanded=false>
                    <NestedList>
                        @foreach (var w in Hero.Weapons)
                        {
                            @if (!w.IsImprovised)
                            {
                                @if (w.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    <MudListItem Icon=@CombatBranchIcon(w.Branch) IconColor=Color.Dark>
                                        <MudText Typo=Typo.body1 GutterBottom=false>
                                            <MudHighlighter Text=@w.Name HighlightedText=@SearchTerm
                                                            Class="mud-primary-text fe-searchhighlight" /> [1]
                                        </MudText>
                                        @*<MudText Typo=Typo.body2 GutterBottom=false>
                <span>??? Stn</span><span>&nbsp;·&nbsp</span><span>@l10n["lblPrice"] ??? @l10n["abbrSilverthaler"]</span>
            </MudText>*@
                                    </MudListItem>
                                }
                            }
                        }
                    </NestedList>
                </MudListItem>
            </MudList>
        </MudItem>

    </MudGrid>
</Sidebar>
<WorkArea>
    <MudGrid>
        <MudItem>
            <MudStack Row=false Spacing=2 Class="mr-5">
                <MudText Typo=Typo.caption>@l10n["lblEnergyPotions"]</MudText>
                <MudStack Row=true>
                    <MudTooltip Text=@l10n["msgHealingPotion"]>
                        <PotionButton Label="LP" Icon=@IconsFE.PotionLife OnClick=DrinkHealingPotion /> @* Labels=HealingPotionLabels*@
                    </MudTooltip>
                    @if (Hero?.GetEnergies().Any(e => e.Id == ChrAttrId.AE) ?? false)
                    {
                        <MudTooltip Text=@l10n["msgMagicalPotion"]>
                            <PotionButton Label="AE" Icon=@IconsFE.PotionArcane OnClick=DrinkMagicPotion /> @*Labels=HealingPotionLabels*@
                        </MudTooltip>
                    }
                </MudStack>
            </MudStack>

        </MudItem>
    </MudGrid>
</WorkArea>
</ContentSideBar>


}


@code {
    /// <summary>The string used to filter the belonging</summary>
    private string SearchTerm { get; set; } = "";


    /// <summary>
    /// Check for a key press of ESC to clear the search field
    /// </summary>
    /// <param name="eventArgs"></param>
    private void OnSearchFieldKey(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == KeyCode.Escape)
        {
            SearchTerm = "";
        }
    }

    /// <summary>
    ///
    /// </summary>
    private async Task OnEditMoney()
    {
        var parameters = new DialogParameters { ["Amount"] = Hero.Money };
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<DlgMoney>(l10n["lblEditCash"], parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Hero.Money = (decimal)result.Data;
        }
    }


    /*
    * RENDERING
    */
    private string GroupIcon(GroupId Group) => Group switch
    {
        GroupId.iAlchimica => IconsFE.PestleMortar,
        GroupId.iAmmunition => IconsFE.Ammunition,
        GroupId.iAnimal => IconsFE.AnimalGoat,
        GroupId.iAnimalSupplies => IconsFE.HorseShoe,
        GroupId.iArmor => IconsFE.ArmourLamellar,
        GroupId.iBandagesNRemedies => IconsFE.Bandages,
        GroupId.iBooks => IconsFE.Book,
        GroupId.iBurglarTools => IconsFE.BurglarTools,
        GroupId.iCeremonialObjects => IconsFE.SunSceptre,
        GroupId.iClothing => IconsFE.Shirt,
        GroupId.iContainers => IconsFE.Chest,
        GroupId.iFinestoneNGems => IconsFE.Gem,
        GroupId.iHerbs => IconsFE.HerbsReed,
        GroupId.iJewellery => IconsFE.Jewellery,
        GroupId.iLights => IconsFE.Torch,
        GroupId.iMagicalArtefacts => IconsFE.MagicArtefact,
        GroupId.iMelee => IconsFE.Sword,
        GroupId.iMusicalInstruments => IconsFE.Flute,
        GroupId.iOrientation => IconsFE.Telescope,
        GroupId.iPoisons => IconsFE.PotionMadness,
        GroupId.iRangedWeapon => IconsFE.Ulisses,
        GroupId.iRopesNChains => IconsFE.Chain,
        GroupId.iSacredTools => IconsFE.SunSceptre,
        GroupId.iStationary => IconsFE.Stationary,
        GroupId.iStimulantsNLuxury => IconsFE.Shisha,
        GroupId.iTools => IconsFE.Tools,
        GroupId.iTransport => IconsFE.Transport,
        GroupId.iTravelNTools => IconsFE.TreasureMap,
        GroupId.iWeaponAccessories => IconsFE.WeaponAccessoires,
        _ => throw new NotImplementedException()
    };

    private string CombatBranchIcon(CombatBranch Group) => Group switch
    {
        CombatBranch.Unarmed => IconsFE.BrassKnuckles,
        CombatBranch.Ranged => IconsFE.Ammunition,
        CombatBranch.Shield => IconsFE.D6_1,
        CombatBranch.Melee => IconsFE.Sword,
        _ => throw new NotImplementedException()
    };




    // POTIONS
    private string[] HealingPotionLabels = new string[] { "?", "1W3", "1W6", "1W6+2", "1W6+4", "1W6+6", "1W6+8" };

    private int PotionLabelLength(string[] Labels)
    {
        int Max = 0;
        foreach (string l in Labels)
            if (l.Length > Max) Max = l.Length;
        return Max;
    }

    private void DrinkHealingPotion()
    {
        foreach (EnergyViMo e in Hero?.GetEnergies()) // find the correct energy
            if (e.Id == ChrAttrId.LP) e.DrinkPotion(0);
        Snackbar.Add("Heal", Severity.Info, config =>
        {
            config.SnackbarVariant = Variant.Outlined;
        });
    }

    private void DrinkMagicPotion()
    {
        Snackbar.Add("Magic", Severity.Info, config =>
        {
            config.SnackbarVariant = Variant.Outlined;
        });
    }
}
