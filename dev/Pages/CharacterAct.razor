@page "/act"

@using FateExplorer.RollLogic
@using FateExplorer.ViewModel
@using FateExplorer.Components

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject ITheHeroViMo Hero
@inject IRollHandlerViMo RollHandler


@if (Hero.HasBorn)
{
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12 sm=6 md=5 lg=4>
            <MudPaper Elevation=0 Outlined=true Class="align-self-stretch">
                @* FILTER *@
                <div class="pa-2">
                    <MudTextField @bind-Value=SearchTerm Placeholder=@l10n["lblSearch"] OnKeyUp=OnSearchFieldKey
                                Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.Search
                                IconSize=Size.Medium Immediate=true AutoFocus=true Clearable=true/>
                </div>
                <MudTabs Elevation=0 Rounded=false Centered=false MinimumTabWidth="48px" @ref=FilterTabs>
                    <MudTabPanel Icon=@Icons.Material.Filled.PushPin ToolTip=@l10n["lblMostUsed"]>
                        <MudList T=SkillsDTO ReadOnly=false Style="overflow:auto; height:620px">
                        @if (FavoriteSkills is not null)
                        {
                            @foreach (var skill in FavoriteSkills)
                            {
                                @if (CheckFilter(skill.Name))
                                {
                                <ListItemSkill Skill=@skill RollSkill=OnSkillCheck 
                                    CanRoutine=CanRoutineCheck[skill.Id] RoutineSkillCheck=OnRoutineSkillCheck
                                    TextFilter=@SearchTerm Abilities=@Abilities[skill.Id] 
                                    @key=skill.Id/> @*ViewSkill=OnSkillView*@
                                }
                            }
                        }
                        </MudList>
                    </MudTabPanel>
                    <MudTabPanel Icon=@Icons.Material.Filled.HotelClass ToolTip=@l10n["lblYourBestSkills"]>
                        <MudList T=SkillsDTO ReadOnly=false Style="overflow:auto; height:620px">
                        @if (BestSkills is not null)
                        {
                            @foreach (var skill in BestSkills)
                            {
                                @if (CheckFilter(skill.Name))
                                {
                                <ListItemSkill Skill=@skill RollSkill=OnSkillCheck 
                                    CanRoutine=CanRoutineCheck[skill.Id] RoutineSkillCheck=OnRoutineSkillCheck
                                    TextFilter=@SearchTerm Abilities=@Abilities[skill.Id]
                                    @key=skill.Id /> @*ViewSkill=OnSkillView*@
                                }
                            }
                        }
                        </MudList>
                    </MudTabPanel>
                    <MudTabPanel Icon=@Icons.Material.Filled.DensitySmall ToolTip=@l10n["lblAll"]>
                        <MudList T=SkillsDTO ReadOnly=false Style="overflow:auto; height:620px">
                        @foreach (var skill in SkillList)
                        {
                            @if (CheckFilter(skill.Name))
                            {
                                <ListItemSkill Skill=skill RollSkill=OnSkillCheck 
                                    CanRoutine=CanRoutineCheck[skill.Id]  RoutineSkillCheck=OnRoutineSkillCheck
                                    TextFilter=@SearchTerm Abilities=@Abilities[skill.Id] 
                                    @key=skill.Id /> @*ViewSkill=OnSkillView*@
                            }
                        }
                        </MudList>
                    </MudTabPanel>
                    @if (SkillDomains is not null && SkillDomains.Count > 1)
                    {
                        @foreach (var d in SkillDomains)
                        {
                        <MudTabPanel Text=@l10n["Check.Skill."+d.ToString()]>
                            <MudList T=SkillsDTO ReadOnly=false Style="overflow:auto; height:620px">
                            @foreach (var skill in SkillList)
                            {
                                @if (skill.Domain == d)
                                {
                                    @if (CheckFilter(skill.Name))
                                    {
                                        <ListItemSkill Skill=skill RollSkill=OnSkillCheck 
                                            CanRoutine=CanRoutineCheck[skill.Id] RoutineSkillCheck=OnRoutineSkillCheck
                                            TextFilter=@SearchTerm Abilities=@Abilities[skill.Id] 
                                            @key=skill.Id /> @*ViewSkill=OnSkillView*@
                                    }
                                }
                            }
                            </MudList>
                        </MudTabPanel>
                        }
                    }
                </MudTabs>
            </MudPaper>
        </MudItem>

        <MudItem xs=12 sm=6 md=7 lg=8>
            <MudPaper Class="pa-2 d-flex justify-space-around">
                <MudText Typo=Typo.h5 GutterBottom=true>@l10n["Roll Results"]</MudText>
                <MudSlider T=int Value=Context.FreeModifier ValueChanged=@((int i) => OnModChanged(i)) 
                    Min=-10 Max=10 Step=1 Color=Color.Primary Class="mx-8" TickMarks=true Size=Size.Small Variant=Variant.Filled>
                    @l10n["lblModifier"]: @Context.FreeModifier @(Context.FreeModifier >= 0 ? "Bonus" : "Malus")
                </MudSlider>
            </MudPaper>

            <MudPaper Class="pa-2 d-flex flex-column align-self-stretch" Style="height:100%;" Outlined=true>
                @if (RollCheckResults is not null && RollCheckResults.Count > 0)
                {
                    @foreach(var r in RollCheckResults.Reverse())
                    {
                        <RollCheckCard Result=@r AvatarIcon=@CheckIcons />
                    }
                }
                else
                {
                    <MudText Typo=Typo.h5 Align=Align.Center Style=@($"color:{Theme.PaletteLight.TextDisabled}")>
                        @l10n["msgCallToAction4Rolls"].ToString().ToUpper()
                    </MudText>
                }
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>
}



@code {
    private MudTheme Theme = new MudTheme(); // Grant access to the theme
    private MudTabs FilterTabs;
    private const int AllSkillsTabIndex = 2;

    // SKILL REGION
    private List<Check.Skill> SkillDomains;

    private IEnumerable<SkillsDTO> SkillList { get; set; }

    private IEnumerable<SkillsDTO> BestSkills { get; set; }

    private IEnumerable<SkillsDTO> FavoriteSkills { get; set; }

    private Dictionary<string,AbilityDTO[]> Abilities { get; set; }

    private Dictionary<string,bool> CanRoutineCheck { get; set; }

    /// <summary>The string used to filter the skills</summary>
    private string SearchTerm = "";


    /// <summary>Verifies if the set filter matches an item string</summary>
    /// <returns></returns>
    private bool CheckFilter(string Item)
    {
        return Item.ToLower().Contains(SearchTerm.ToLower());
    }


    // CHECK REGION

    private readonly string[] CheckIcons_ = new string[4] { Icons.Material.Filled.LocalAtm,
        Icons.Material.Filled.ThumbDown, Icons.Material.Filled.ThumbUp, Icons.Material.Filled.Star };
    private readonly string[] CheckIcons = new string[6] { 
        Icons.Material.Filled.SentimentVeryDissatisfied, Icons.Material.Filled.TheaterComedy, Icons.Material.Filled.SentimentDissatisfied,
        Icons.Material.Filled.SentimentSatisfied, Icons.Material.Filled.TheaterComedy, Icons.Material.Filled.SentimentVerySatisfied };

    /// <summary>
    /// The latest roll check
    /// </summary>
    private RollCheckResultViMo ActiveCheck;
    private EueuqMax<RollCheckResultViMo> RollCheckResults { get; set; }
    private CheckContextViMo Context { get; set; }


    private void OnModChanged(int NewValue)
    {
        Context.FreeModifier = NewValue;
        UpdateCanRoutineCheck();
    }


    private void OnSkillCheck(SkillsDTO s)
    {
        bool CheckSucceeded = true;
        try
        { // TODO: 1: use Abilities[s.Id]
            var cnv = Array.ConvertAll(Hero.GetSkillAbilities(s.Id), new System.Converter<AbilityDTO, ICharacterAttributDTO>((a) => (AbilityDTO)a));
            ActiveCheck = RollHandler.OpenRollCheck(new Check(s.Domain), s, Context, cnv);
        }
        catch(NotImplementedException error)
        {
            Snackbar.Add(l10n[error.Message], Severity.Error);
            CheckSucceeded = false;
        }
        if (CheckSucceeded)
        {
            RollCheckResults.Enqueue(ActiveCheck);
        }
    }


    /// <summary>
    /// Performs a routine check
    /// </summary>
    /// <param name="s">The skill to check</param>
    private void OnRoutineSkillCheck(SkillsDTO s)
    {
        bool CheckSucceeded = true;
        try
        {
            var cnv = Abilities[s.Id];
            ActiveCheck = RollHandler.OpenRoutineSkillCheck(new Check(s.Domain, isRoutine: true), s, cnv, Context);
        }
        catch(NotImplementedException error)
        {
            Snackbar.Add(l10n[error.Message], Severity.Error);
            CheckSucceeded = false;
        }
        if (CheckSucceeded)
        {
            RollCheckResults.Enqueue(ActiveCheck);
        }
    }



    private void OnSkillView(SkillsDTO s)
    {

    }

    private void OnSearchFieldKey(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Key == "NumpadEnter")
        {
            FilterTabs.ActivatePanel(AllSkillsTabIndex);
        }
        else if (args.Key == "Escape")
        {
            SearchTerm = "";
        }
    }


    private void UpdateCanRoutineCheck()
    {
        foreach (var s in SkillList)
            CanRoutineCheck[s.Id] = RollHandler.CanRoutineSkillCheck(s, Abilities[s.Id], new(Context.FreeModifier));
    }



    // INITIALISATION REGION

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Context = new(); // before! `LoadHeroData(...)`
        LoadHeroData(false);
        if (RollCheckResults is null)
            RollCheckResults = new(4);
    }


    /// <summary>Reacts to any changes of the character view model</summary>
    protected void OnCharacterHasLoaded()
    {
        LoadHeroData(true);
        StateHasChanged();
    }


    private void LoadHeroData(bool ForceReload)
    {
        if (Hero.HasBorn)
        {
            if (SkillDomains is null || ForceReload)
                SkillDomains = Hero.GetMasteredSkillDomains();
            if (SkillList is null || ForceReload)
                SkillList = Hero.GetSkills();
            if (BestSkills is null || ForceReload)
                BestSkills = Hero.GetBestSkills();
            if (FavoriteSkills is null || ForceReload)
                FavoriteSkills = Hero.GetFavoriteSkills();
            if (Abilities is null || ForceReload)
            {
                Abilities = new();
                foreach (var s in SkillList)
                    Abilities.Add(s.Id, Hero.GetSkillAbilities(s.Id));
            }
            if (CanRoutineCheck is null ||ForceReload)
            {
                CanRoutineCheck = new();
                foreach (var s in SkillList)
                {
                    bool CanDo = RollHandler.CanRoutineSkillCheck(s, Abilities[s.Id], new(Context.FreeModifier));
                    CanRoutineCheck.Add(s.Id, CanDo);
                }
            }
        }
    }
}
