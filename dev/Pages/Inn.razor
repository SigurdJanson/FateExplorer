@page "/inn"
@using FateExplorer.Components
@using FateExplorer.Inn
@using Aventuria

@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject HttpClient httpClient

<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.ExtraExtraLarge>
    <MudGrid Spacing=4 Class="mt-16">
        <MudItem xs=12 md=2>
            <MudStack Spacing=4>
            <MudSelect @bind-Value=SelectedRegion Class="mt-0" Label=@l10n["lblSelectRegion"] FullWidth=true>
                @foreach (Region item in Enum.GetValues(typeof(Region)))
                {
                    <MudSelectItem Value=@item>@l10n[$"Region.{item}"]</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Value=SelectedQuality Class="mt-0" Label=@l10n["lblSelectQualityLevel"] FullWidth=true ValueChanged=@((QualityLevel l) => QualityChanged(l))>
                @foreach (QualityLevel item in Enum.GetValues(typeof(QualityLevel)))
                {
                    <MudSelectItem Value=@item>@l10n[$"Quality.{item}"]</MudSelectItem>
                }
            </MudSelect>
            <MudSwitch T=bool @bind-Value=PriceMatchesQuality>@l10n["lblPriceMatchesQuality"]</MudSwitch>
            <MudSelect @bind-Value=SelectedPrice Label=@l10n["lblSelectPriceLevel"] FullWidth=true Disabled=PriceMatchesQuality>
                @foreach (PriceLevel item in Enum.GetValues(typeof(PriceLevel)))
                {
                    <MudSelectItem Value=@item>@l10n[$"Price.{item}"]</MudSelectItem>
                }
            </MudSelect>
            <MudDivider />
            <MudButton OnClick=@GenerateName StartIcon=@Icons.Material.Sharp.Restaurant
                        Size=Size.Large Variant=Variant.Outlined FullWidth=true>
                @l10n["btnInnGenerateName"]
            </MudButton>
            <MudButton OnClick=@GenerateMenu StartIcon=@Icons.Material.Sharp.MenuBook
                        Size=Size.Large Variant=Variant.Outlined FullWidth=true>
                @l10n["btnInnGenerateMenu"]
            </MudButton>
            <MudMenu Label=@l10n["btnAddMenuEntry"] EndIcon=@Icons.Material.Filled.ArrowDropDown
                     Size=Size.Large Variant=Variant.Outlined>
                <MudMenuItem OnClick=@(() => AddMenuEntry(Food.MainDish))>@l10n["btnAddMainDish"]</MudMenuItem>
                <MudMenuItem OnClick=@(() => AddMenuEntry(Food.BreadDish))>@l10n["btnAddColdDish"]</MudMenuItem>
                <MudMenuItem OnClick=@(() => AddMenuEntry(Food.Dessert))>@l10n["btnAddDessert"]</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick=@(() => AddMenuEntry(Food.NonAlcoholic))>@l10n["btnAddNonAlcBeverage"]</MudMenuItem>
                <MudMenuItem OnClick=@(() => AddMenuEntry(Food.Alcoholic))>@l10n["btnAddAlcoholic"]</MudMenuItem>
            </MudMenu>
            </MudStack>
        </MudItem>
        <MudItem xs=12 md=10>
            @if (string.IsNullOrWhiteSpace(InnName))
            {
                <MudText Typo=Typo.h4 Align=Align.Center Class="mud-text-disabled" GutterBottom=true>@l10n["lblInnNoName"]</MudText>
            } else
            {
                <MudText Typo=Typo.h4 Align=Align.Center GutterBottom=true>Gasthaus @InnName</MudText>
            }

            <MudPaper Class="d-flex flex-column pa-3" Outlined=true>
                <MudGrid>
                    <MudItem xs=12 Class="flex-shrink-1">
                        <MudText Typo=Typo.h5 Align=Align.Center GutterBottom=true>@l10n["lblInnMenu"]</MudText>
                    </MudItem>

                    <MudItem xs=12>
                        <MudContainer MaxWidth=MaxWidth.Small>
                        @if (Menu is null || Menu.Count == 0)
                        {
                            <MudText Align=Align.Center GutterBottom=true>@l10n["msgNoMenuAvailable"]</MudText>
                        }
                        else
                        {
                        <MudSimpleTable Elevation=0 Dense=true>
                            <tbody>
                            @foreach (var i in Menu)
                            {
                                <tr>
                                    <td>@i.Name</td>
                                    <td>@($"{i.Price:#0.##}") S</td> @*TODO: Unfix fixed Silverthaler unit*@
                                </tr>
                            }
                            </tbody>
                        </MudSimpleTable>
                        }
                        </MudContainer>
                    </MudItem>

                </MudGrid>
            </MudPaper>

        </MudItem>

    </MudGrid>
</MudContainer>


@code {
    private InnViMo InnGenerator { get; set; }

    private Region SelectedRegion { get; set; } = Region.Middenrealm;
    private QualityLevel SelectedQuality { get; set; } = QualityLevel.Normal;
    private PriceLevel SelectedPrice { get; set; } = PriceLevel.Normal;
    private bool PriceMatchesQuality { get; set; } = true;

    private string InnName { get; set; } = "";

    private List<InnMenuItemDTO> Menu { get; set; }



    private void GenerateName()
    {
        InnName = InnGenerator.GetName(SelectedRegion, SelectedQuality);
    }

    private void GenerateMenu()
    {
        Menu = InnGenerator.GetMenu(SelectedRegion, SelectedQuality, SelectedPrice);
    }


    private void AddMenuEntry(Food FoodType)
    {
        InnMenuItemDTO? newItem = InnGenerator.GetMenuEntry(SelectedRegion, SelectedQuality, SelectedPrice, FoodType);
        if (newItem is not null)
        {
            if (Menu is null) Menu = new();
            Menu.Add(newItem ?? new InnMenuItemDTO()); // compiler error without null-coalescing operator
        }
    }

    /// <summary>
    /// Update the quality when the user changes the selection AND
    /// update the prices if the user has linked quality and price.
    /// </summary>
    /// <param name="quality">Selected quality level</param>
    private void QualityChanged(QualityLevel quality)
    {
        SelectedQuality = quality;
        if (PriceMatchesQuality)
            SelectedPrice = (PriceLevel)quality;
    }


    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        InnGenerator = new(httpClient);
        await InnGenerator.InitializeGameDataAsync();
    }
}
