@page "/shop"
@using FateExplorer.Components
@using FateExplorer.GameData
@using FateExplorer.Shop
@using System.ComponentModel.DataAnnotations
@using System.Windows.Input;

@inject IGameDataService GameData
@inject AppSettings AppCfg
@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject HttpClient httpClient

<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=3>
        </MudItem>
        <MudItem xs=6>
            <MudText Typo=Typo.h3 Align=Align.Center GutterBottom=true>@l10n["naviShop"]</MudText>
        </MudItem>
        <MudItem xs=3>
            <MudBadge Content=@(ShoppingCart?.ItemCount ?? 0) Visible=@(ShoppingCart?.ItemCount != 0)
                      Color=Color.Info Overlap=true Bordered=true>
                <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=@(() => OpenShopCartDrawer = !OpenShopCartDrawer)
                    StartIcon=@Icons.Material.Sharp.LocalMall IconColor=Color.Dark Size=Size.Large>
                    @l10n["lblShoppingCart"]
                </MudButton>
            </MudBadge>
        </MudItem>


        <MudItem xs=12>
            @if (Stock is not null)
            {
            <MudTable @ref="Table" ServerData="@(new Func<TableState, Task<TableData<ShopItemViMo>>>(ServerReload))"
                    SortLabel=@l10n["Sort By"] Virtualize=true
                    FixedHeader=true Hover=true Striped=true Height="600px">
                <ToolBarContent>
                    <MudTextField T=string Clearable=true TextUpdateSuppression=false
                        DebounceInterval=250 OnDebounceIntervalElapsed=@(s=>OnSearch(s, selectedGroupId))
                        Placeholder=@l10n["lblSearch"] Adornment=Adornment.Start
                        AdornmentIcon=@Icons.Material.Sharp.Search IconSize=Size.Medium Class="mt-0" />
                    <MudSpacer />
                    <MudSelect T="int?" Class="mt-0" Clearable ValueChanged=@(g => OnSearch(searchString, g))
                        Label=@l10n["lblSelectStockCategory"]>
                        @foreach (var item in Stock.GetGroups())
                        {
                            <MudSelectItem Value=@((int?)item.id)>@item.name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSpacer /><MudSpacer />
                    <MudSelect T=@((string, string)) Value=@ComparisonCurrency ValueChanged=@(c => OnCurrencyChanged(c))
                        Class="mt-0" Label=@l10n["lblSelectComaprisonCurrency"] ToStringFunc=@(v => v.Item2)>
                        @foreach (var item in Stock.GetCurrencies())
                        {
                            <MudSelectItem Value=@item />
                        }
                    </MudSelect>                
                </ToolBarContent>
                <ColGroup>
                    <col style="width:35%" />
                    <col style="width:12rem"/>
                    <col style="width:12rem" />
                    <col style="width:25rem" />
                    <col style="width:20%"/>
                    <col style="width:36rem" />
                </ColGroup>
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="Name" T="ShopItemViMo">
                        @l10n["lblName"]
                    </MudTableSortLabel></MudTh>
                    <MudTh ><MudTableSortLabel SortLabel="Price" T=ShopItemViMo>
                        @l10n["lblPrice"] (S)
                    </MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Price" T=ShopItemViMo>
                        @ComparisonCurrency.name
                    </MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Weight" T="ShopItemViMo">
                        @l10n["lblWeight"] (@l10n["lblStone"])
                    </MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Group" T="ShopItemViMo">
                        @l10n["lblGroup"]
                    </MudTableSortLabel></MudTh>
                    <MudTh>
                        -
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudHighlighter Text=@context.Name HighlightedText=@searchString 
                            Style="background-color:transparent;font-weight:bold" />
                    </MudTd>
                    <MudTd DataLabel="Price" Style="text-align:right">@context.PriceStr</MudTd>
                    <MudTd Style="text-align:right">@((context.Price * ComparisonCurrencyRate).ToString("N2"))</MudTd>
                    <MudTd DataLabel="Weight" Style="text-align:right">@context.WeightStr</MudTd>
                    <MudTd DataLabel="Group">
                        <MudHighlighter Text=@context.Group HighlightedText=@searchString 
                            Style="background-color:transparent;font-weight:bold" />
                    </MudTd>
                    <MudTd>
                        <MudTooltip Text=@Tooltips[msgAdd2Cart]>
                            <MudButton Size=Size.Small Variant=Variant.Filled
                                Color=Color.Secondary
                                OnClick=@context.Add2Cart
                                aria-label=@Tooltips[msgAdd2Cart] Class="px-2">+1</MudButton>
                        </MudTooltip>
                        <MudTooltip Text=@Tooltips[msgShowDetails]>
                            <MudButton Size=Size.Small Variant=Variant.Outlined Color=Color.Tertiary
                                OnClick=@context.OpenItemDetails
                                aria-label=@Tooltips[msgShowDetails]>Details</MudButton>
                        </MudTooltip>
                        <MudTooltip Text=@Tooltips[msgFindAtUlissesWiki]>
                            <MudButton Size=Size.Small Variant=Variant.Outlined 
                                Color=Color.Tertiary
                                Link=@("https://ulisses-regelwiki.de/suche.html?keywords=" + context.Name)
                                Target="_blank"
                                aria-label=@Tooltips[msgFindAtUlissesWiki]>&#x2754;</MudButton>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudSkeleton SkeletonType=SkeletonType.Text Width="100%" />
                <MudText Typo=Typo.caption>Shop is about to be opened</MudText>
                <MudSkeleton SkeletonType=SkeletonType.Text Width="100%" />
            }
        </MudItem>
    </MudGrid>
</MudContainer>


@* EMPTY SHOPPING CART *@
<MudDrawer @bind-Open=@OpenDetailsDrawer Anchor=Anchor.End Elevation=1 Variant=@DrawerVariant.Temporary Width="500px">
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs=12>
        @if (ItemDetailsRender is not null)
        {
            @ItemDetailsRender
        }
        else
        {
            <span>@l10n["msgEmptyItemDetails"]@*No item details available*@</span>
        }
        </MudItem>
    </MudGrid>
</MudContainer>
</MudDrawer>

@* SHOPPING CART *@
<MudDrawer @bind-Open=@OpenShopCartDrawer Anchor=Anchor.End Elevation=1 Variant=@DrawerVariant.Temporary Width="500px">
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs=12>
            @if ((ShoppingCart?.Count ?? 0) > 0)
            {
            <MudPaper Class="pa-4" Outlined=true>
                <div class="d-flex justify-space-between">
                    <div>
                        <MudIcon Icon=@Icons.Material.Sharp.LocalMall Size=Size.Large/>
                        <MudText Typo=Typo.caption>@l10n["lblShoppingCartItems"]</MudText>
                    </div>
                    <MudButton OnClick=@(() => ShoppingCart.Clear())
                        Variant=Variant.Text StartIcon=@IconsFE.LocalMallClear>
                        @l10n["lblEmptyBasket"]
                    </MudButton>
                </div>
                <MudSimpleTable Hover=true Dense=true FixedHeader=true Elevation=0>
                    <thead class="mud-table-head">
                        <tr>
                            <th>@l10n["lblName"]</th>
                            <th>@l10n["lblPrice"]</th>
                            <th>@l10n["lblCount"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in ShoppingCart)
                        {
                        <tr>
                            <td>@row.Item.Name</td>
                            <td>@row.Item.Price</td>
                            <td>@row.Count</td>
                        </tr>
                        }
                    </tbody>
                            <tfoot class="mud-table-foot">
                        <tr>
                          <td>@l10n["lblSumTotal"]</td>
                          <td>@string.Format("{0:0,0.00}", ShoppingCart.TotalPrice)</td>
                          <td></td>
                        </tr>
                      </tfoot>
                </MudSimpleTable>
            </MudPaper>
            <MudPaper Class="pa-4" Outlined=true>
                <MudText Typo=Typo.body2>
                    @ExplainTheValueofMoney(ShoppingCart.TotalPrice)
                </MudText>
            </MudPaper>

            <CompetitiveMerchantCheck ListPrice=@ShoppingCart.TotalPrice Merchant=@Merchant />
            }
            else
            {
                <MudText Typo=Typo.body2>@l10n["msgEmptyShoppingCart"]</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>
</MudDrawer>



@code {
    // TABLE
    private MudTable<ShopItemViMo> Table;
    private string[] Tooltips;
    const int msgAdd2Cart = 0, msgShowDetails = 1, msgFindAtUlissesWiki = 2;


    private ShopInventoryViMo Stock { get; set; }

    private string searchString = null;
    private int? selectedGroupId = null;

    private (string id, string name) ComparisonCurrency = ("", "");
    private decimal ComparisonCurrencyRate = 1.0M;


    private async Task<TableData<ShopItemViMo>> ServerReload(TableState state)
    {
        List<ShopItemViMo> data = await Task.Run(() => Stock.GetStock(searchString, selectedGroupId));

        // Sort
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            IOrderedEnumerable<ShopItemViMo> SortedData = (state.SortLabel) switch
            {
                "Name"   => data.OrderByDirection(state.SortDirection, o => o.Name),
                "Price"  => data.OrderByDirection(state.SortDirection, o => o.Price),
                "Weight" => data.OrderByDirection(state.SortDirection, o => o.Weight),
                "Group"  => data.OrderByDirection(state.SortDirection, o => o.Group), 
                _ => data as IOrderedEnumerable<ShopItemViMo>
            };
            return new TableData<ShopItemViMo>() { TotalItems = data.Count(), Items = SortedData };
        }

        return new TableData<ShopItemViMo>() { TotalItems = data.Count(), Items = data };
    }


    /// <summary>
    /// Reload table data on changed search parameters
    /// </summary>
    /// <param name="text">Text defining the free text search; 
    /// if <see cref="null"/> or empty no filter is applied</param>
    /// <param name="group">Number identifying the selected product group; 
    /// if <see cref="null"/> no group filter will be applied</param>
    private void OnSearch(string text, int? group)
    {
        searchString = text;
        selectedGroupId = group;

        Table.ReloadServerData();
    }


    private void OnCurrencyChanged((string id, string name) currency)
    {
        ComparisonCurrency = currency;
        ComparisonCurrencyRate = Stock.GetExchangeRate(currency.id);
    }


    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Stock = new ShopInventoryViMo(GameData, AppCfg, httpClient, l10n);
        await Stock.InitializeGameDataAsync();

        foreach(var item in Stock.GetStock(null, null))
        {
            item.OpenItemDetails = (e) => OpenDrawer(item);
            item.Add2Cart = (e) => ShoppingCart.Add((item, 1));
        }

        ShoppingCart = new ShoppingCartViMo();
        Merchant = new MerchantViMo(GameData);
        OnCurrencyChanged(Stock.GetDefaultCurrency());

        // Avoid translating this thousands of times
        Tooltips = new string[3];
        Tooltips[msgAdd2Cart] = l10n["msgAdd2Cart"];
        Tooltips[msgShowDetails] = l10n["msgShowDetails"];
        Tooltips[msgFindAtUlissesWiki] = l10n["msgFindAtUlissesWiki"];
    }



    // DETAILS DRAWER
    private bool OpenDetailsDrawer;
    private ShopItemViMo ItemWithDetails;
    private RenderFragment ItemDetailsRender { get; set; }

    private void OpenDrawer(ShopItemViMo item)
    {
        ItemWithDetails = item;
        ItemDetailsRender = RenderItemDetails();
        OpenDetailsDrawer = true;
    }



    /// <summary>
    /// Create dynamic list of item properties in the sidebar
    /// </summary>
    /// <returns>A list of item properties as RenderFragment</returns>
    /// <remarks>Source:<br/>
    /// * https://chrissainty.com/building-components-via-rendertreebuilder/
    /// * https://codyanhorn.tech/blog/blazor/2020/04/26/Blazor-Class-Based-Component.html
    /// * https://www.syncfusion.com/blogs/post/how-to-create-a-dynamic-form-builder-in-blazor.aspx
    /// * https://docs.microsoft.com/en-us/aspnet/core/blazor/advanced-scenarios?view=aspnetcore-6.0
    /// </remarks>
    private RenderFragment RenderItemDetails() => builder =>
    {
        int seq = 0;
        var proList = typeof(ShopItemViMo).GetProperties();
        foreach (var prp in proList)
        {
            var displayLabel = (DisplayAttribute)prp.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault();
            if (displayLabel is null || displayLabel.Name == "hide")
                continue;

            // Get the initial property value.
            var propInfoValue = typeof(ShopItemViMo).GetProperty(prp.Name);

            var defaultValue = propInfoValue.GetValue(ItemWithDetails);
            if (defaultValue is null) continue;

            string Value;
            if (defaultValue is Array)
                Value = string.Join(", ", defaultValue as IEnumerable<int>);
            else
                Value = defaultValue.ToString();

            if (displayLabel.Name != "-")
            {
                builder.OpenComponent(++seq, typeof(MudField));
                builder.AddAttribute(++seq, "Label", l10n[displayLabel.Name]);
                builder.AddAttribute(++seq, "Variant", Variant.Text);
                builder.AddAttribute(++seq, "InnerPadding", false);
                builder.AddAttribute(++seq, "Class", "mb-4");
                builder.AddAttribute(++seq, "ChildContent", (RenderFragment)((builder2) => {
                    builder2.AddContent(++seq, Value);
                }));
                builder.CloseComponent();
            }
            else
            {
                builder.OpenComponent(++seq, typeof(MudText));
                builder.AddAttribute(++seq, "Typo", Typo.h6);
                builder.AddAttribute(++seq, "ChildContent", (RenderFragment)((builder2) => {
                    builder2.AddContent(++seq, Value);
                }));
                builder.CloseComponent();
            }
        }
    };


    // SHOPPING CART DRAWER
    private ShoppingCartViMo ShoppingCart { get; set; }
    private MerchantViMo Merchant { get; set; }

    private bool OpenShopCartDrawer { get; set; }


    /// <summary>
    /// 
    /// </summary>
    /// <param name="Price"></param>
    /// <returns></returns>
    protected string ExplainTheValueofMoney(decimal Price)
    {
        var Time = MoneyToWage.TimeToEarn(LaborClass.Simple, Price);
        string ms = Time.months == 1 ? "shopMonth" : "shopMonths";
        ms = l10n[ms];
        string ds = Time.months == 1 ? "shopDay" : "shopDays";
        ds = l10n[ds];

        if (Time.years > 0)
        {
            string ys = Time.years == 1 ? "shopYear" : "shopYears";
            ys = l10n[ys];
            if (Time.months <= 1)
                return string.Format(l10n["txtMoneyValue1"], Time.years, ys);
            else
                return string.Format(l10n["txtMoneyValue2"], Time.years, ys, Time.months, ms);
        }
        else if (Time.months > 0)
            return string.Format(l10n["txtMoneyValue1"], Time.months, ms);
        else
            return string.Format(l10n["txtMoneyValue1"], Time.days, ds);
    }
    
}
