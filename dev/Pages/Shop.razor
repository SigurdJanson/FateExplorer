@page "/shop"
@using FateExplorer.Components
@using FateExplorer.GameData
@using FateExplorer.Shop
@using System.ComponentModel.DataAnnotations
@using System.Windows.Input;

@inject IGameDataService GameData
@inject AppSettings AppCfg
@inject IStringLocalizer<App> l10n
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@*@inject IJSRuntime JSRuntime; // see below `OnFindAtUlisses(...)` *@

<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=3>
        </MudItem>
        <MudItem xs=6>
            <MudText Typo=Typo.h3 Align=Align.Center GutterBottom=true>@l10n["naviShop"]</MudText>
        </MudItem>
        <MudItem xs=3>
            <MudBadge Content=@(ShoppingCart?.ItemCount ?? 0) Visible=@(ShoppingCart?.ItemCount != 0)
                      Color=Color.Info Overlap=true Bordered=true>
                <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=@(() => OpenShopCartDrawer = !OpenShopCartDrawer)
                    StartIcon=@Icons.Material.Sharp.LocalMall IconColor=Color.Dark Size=Size.Large>
                    @l10n["lblShoppingCart"]
                </MudButton>
            </MudBadge>
        </MudItem>


        <MudItem xs=12>
            @if (Stock is not null)
            {
                <MudDataGrid @ref="Table" T=ShopItem Items=@_items ColumnResizeMode=ResizeMode.Column ShowColumnOptions=false
                    Virtualize=true SortMode=SortMode.Single FixedHeader=true Hover=true Striped=true Height="600px"
                         Filterable=true QuickFilter=@OnFilter ShowFilterIcons=false>
                <ToolBarContent>
                        <MudTextField @bind-Value=SearchTerm Clearable=true TextUpdateSuppression=false
                                      Placeholder=@l10n["lblSearch"] Adornment=Adornment.Start DebounceInterval=250
                                      Immediate=true OnKeyUp=@OnSearchFieldKey
                                      AdornmentIcon=@Icons.Material.Sharp.Search IconSize=Size.Medium Class="mt-0" />
                    <MudSpacer />
                    <MudSelect T="int?" @bind-Value=selectedGroupId Class="mt-0" Clearable 
                        Label=@l10n["lblSelectStockCategory"]>
                        @foreach (var item in Stock.GetGroups())
                        {
                            <MudSelectItem Value=@((int?)item.id)>@item.name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSpacer /><MudSpacer />
                    <MudSelect Value=ComparisonCurrency ValueChanged=@(((string, string) c) => OnCurrencyChanged(c))
                        Class="mt-0" Label=@l10n["lblSelectComparisonCurrency"] ToStringFunc=@(v => v.Item2)>
                        @foreach (var item in Stock.GetCurrencies())
                        {
                            <MudSelectItem Value=@item />
                        }
                    </MudSelect>
                </ToolBarContent>
                <NoRecordsContent>
                    <MudText Typo=Typo.caption>Shop is about to be opened</MudText>
                </NoRecordsContent>
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title=@l10n["lblName"] />
                    <PropertyColumn Property="x => x.Price" Title=@l10n["lblPrice"] Format="N2" Resizable=false />
                    <PropertyColumn Property="x => x.Price * ComparisonCurrencyRate" Title=@ComparisonCurrency.name Format="N2" Resizable=false />
                    <PropertyColumn Property="x => x.Weight" Title=@l10n["lblWeight"] Resizable=false />
                    <PropertyColumn Property="x => x.Group" Title=@l10n["lblGroup"] />
                    <TemplateColumn CellClass="d-flex justify-end" Resizable=false >
                        <CellTemplate>
                            <MudIconButton Icon=@Icons.Material.Filled.AddShoppingCart title=@Tooltips[msgAdd2Cart] 
                                OnClick=@(() => OnAdd2Cart(context.Item)) />
                            <MudIconButton Icon=@Icons.Material.Filled.Info title=@Tooltips[msgShowDetails] 
                                OnClick=@(() => OnOpenDetails(context.Item)) />
                            <MudIconButton Icon=@IconsFE.Ulisses title=@Tooltips[msgFindAtUlissesWiki]
                                           Href=@("https://ulisses-regelwiki.de/suche.html?keywords=" + context.Item.Name)
                                           Target="_blank" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            }
        </MudItem>
    </MudGrid>
</MudContainer>


@* EMPTY SHOPPING CART *@
<MudDrawer @bind-Open=@OpenDetailsDrawer Anchor=Anchor.End Elevation=1 Variant=@DrawerVariant.Temporary Width="500px">
<MudContainer Class="mt-16 px-8" MaxWidth=MaxWidth.False>
    <MudGrid>
        <MudItem xs=12>
        @if (ItemDetailsRender is not null)
        {
            @ItemDetailsRender
        }
        else
        {
            <span>@l10n["msgEmptyItemDetails"]@*No item details available*@</span>
        }
        </MudItem>
    </MudGrid>
</MudContainer>
</MudDrawer>

@* SHOPPING CART *@
<MudDrawer @bind-Open=@OpenShopCartDrawer Anchor=Anchor.End Elevation=1 Variant=@DrawerVariant.Temporary Width="500px">
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs=12>
            @if ((ShoppingCart?.Count ?? 0) > 0)
            {
            <MudPaper Class="pa-4" Outlined=true>
                <div class="d-flex justify-space-between">
                    <div>
                        <MudIcon Icon=@Icons.Material.Sharp.LocalMall Size=Size.Large/>
                        <MudText Typo=Typo.caption>@l10n["lblShoppingCartItems"]</MudText>
                    </div>
                    <MudButton OnClick=@(() => ShoppingCart.Clear())
                        Variant=Variant.Text StartIcon=@IconsFE.LocalMallClear>
                        @l10n["lblEmptyBasket"]
                    </MudButton>
                </div>
                <MudSimpleTable Hover=true Dense=true FixedHeader=true Elevation=0>
                    <thead class="mud-table-head">
                        <tr>
                            <th>@l10n["lblName"]</th>
                            <th>@l10n["lblPrice"]</th>
                            <th>@l10n["lblCount"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in ShoppingCart)
                        {
                        <tr>
                            <td>@row.Item.Name</td>
                            <td>@row.Item.Price</td>
                            <td>@row.Count</td>
                        </tr>
                        }
                    </tbody>
                            <tfoot class="mud-table-foot">
                        <tr>
                          <td>@l10n["lblSumTotal"]</td>
                          <td>@string.Format("{0:0,0.00}", ShoppingCart.TotalPrice)</td>
                          <td></td>
                        </tr>
                      </tfoot>
                </MudSimpleTable>
            </MudPaper>
            <MudPaper Class="pa-4" Outlined=true>
                <MudText Typo=Typo.body2>
                    @ExplainTheValueofMoney(ShoppingCart.TotalPrice)
                </MudText>
            </MudPaper>

            <CompetitiveMerchantCheck ListPrice=@ShoppingCart.TotalPrice Merchant=@Merchant />
            }
            else
            {
                <MudText Typo=Typo.body2>@l10n["msgEmptyShoppingCart"]</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>
</MudDrawer>



@code {
    // TABLE
    private MudDataGrid<ShopItem> Table;
    private string[] Tooltips;
    const int msgAdd2Cart = 0, msgShowDetails = 1, msgFindAtUlissesWiki = 2;


    private ShopInventoryViMo Stock { get; set; }

    private string SearchTerm = "";
    private int? selectedGroupId = null;

    private (string id, string name) ComparisonCurrency = ("", "");
    private decimal ComparisonCurrencyRate = 1.0M;

    // The product range in the shop
    private record ShopItem(string Id, string Name, decimal Price, double Weight, string Group, int GroupId);
    private List<ShopItem> _items = new List<ShopItem>();


    /// <summary>
    /// Filter for the table
    /// </summary>
    private Func<ShopItem, bool> OnFilter => x =>
    {
        if (selectedGroupId is not null)
            if (x.GroupId != selectedGroupId)
                return false;

        if (string.IsNullOrWhiteSpace(SearchTerm))
            return true;
        if (x.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Group.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    /// <summary>
    /// Check for a key press of ESC to clear the search field
    /// </summary>
    /// <param name="eventArgs"></param>
    private void OnSearchFieldKey(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Escape")
        {
            SearchTerm = "";
        }
    }

    /// <summary>
    /// Responds to a change of the comparison currency
    /// </summary>
    /// <param name="currency">The newly selected currency.</param>
    private void OnCurrencyChanged((string id, string name) currency)
    {
        ComparisonCurrency = currency;
        ComparisonCurrencyRate = Stock.GetExchangeRate(currency.id);
    }

    /// <summary>
    /// Responds to an "add 2 cart" click
    /// </summary>
    /// <param name="item">The added ShopItem record</param>
    private void OnAdd2Cart(ShopItem item)
    {
        var i = Stock.GetStock(null, null).Find(x => x.Id == item.Id);
        ShoppingCart.Add((i, 1));
    }

    /// <summary>
    /// Responds to an "Open details" click
    /// </summary>
    /// <param name="item"></param>
    private void OnOpenDetails(ShopItem item)
    {
        var i = Stock.GetStock(null, null).Find(x => x.Id == item.Id);
        OpenDrawer(i);
    }

    // TODO: get this fixed with a call over JSInterop. At the moment it freezes the app.
    // <MudIconButton Icon=@IconsFE.Ulisses Title=@Tooltips[msgFindAtUlissesWiki]
    //     OnClick=@(async () => await OnFindAtUlisses(context.Item))  />
    //private async ValueTask OnFindAtUlisses(ShopItem item)
    //{
    //    string url = "https://ulisses-regelwiki.de/suche.html?keywords=" + item.Name;
    //    await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    //}

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Stock = new ShopInventoryViMo(GameData, AppCfg, httpClient, l10n);
        await Stock.InitializeGameDataAsync();

        foreach (var item in Stock.GetStock(null, null))
            _items.Add(new ShopItem(item.Id, item.Name, item.Price, item.Weight, item.Group, (int)item.GroupId));

        ShoppingCart = new ShoppingCartViMo();
        Merchant = new MerchantViMo(GameData);
        OnCurrencyChanged(Stock.GetDefaultCurrency());

        // Avoid translating this thousands of times
        Tooltips = new string[3];
        Tooltips[msgAdd2Cart] = l10n["msgAdd2Cart"];
        Tooltips[msgShowDetails] = l10n["msgShowDetails"];
        Tooltips[msgFindAtUlissesWiki] = l10n["msgFindAtUlissesWiki"];
    }



    //
    //
    // DETAILS DRAWER
    private bool OpenDetailsDrawer;
    private ShopItemViMo ItemWithDetails;
    private RenderFragment ItemDetailsRender { get; set; }

    private void OpenDrawer(ShopItemViMo item)
    {
        ItemWithDetails = item;
        ItemDetailsRender = RenderItemDetails();
        OpenDetailsDrawer = true;
    }



    /// <summary>
    /// Create dynamic list of item properties in the sidebar
    /// </summary>
    /// <returns>A list of item properties as RenderFragment</returns>
    /// <remarks>Source:<br/>
    /// * https://chrissainty.com/building-components-via-rendertreebuilder/
    /// * https://codyanhorn.tech/blog/blazor/2020/04/26/Blazor-Class-Based-Component.html
    /// * https://www.syncfusion.com/blogs/post/how-to-create-a-dynamic-form-builder-in-blazor.aspx
    /// * https://docs.microsoft.com/en-us/aspnet/core/blazor/advanced-scenarios?view=aspnetcore-6.0
    /// </remarks>
    private RenderFragment RenderItemDetails() => builder =>
    {
        int seq = 0;
        var proList = typeof(ShopItemViMo).GetProperties();
        foreach (var prp in proList)
        {
            var displayLabel = (DisplayAttribute)prp.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault();
            if (displayLabel is null || displayLabel.Name == "hide")
                continue;

            // Get the initial property value.
            var propInfoValue = typeof(ShopItemViMo).GetProperty(prp.Name);

            var defaultValue = propInfoValue.GetValue(ItemWithDetails);
            if (defaultValue is null) continue;

            string Value;
            if (defaultValue is Array)
                Value = string.Join(", ", defaultValue as IEnumerable<int>);
            else
                Value = defaultValue.ToString();

            if (displayLabel.Name != "-")
            {
                builder.OpenComponent(++seq, typeof(MudField));
                builder.AddAttribute(++seq, "Label", l10n[displayLabel.Name]);
                builder.AddAttribute(++seq, "Variant", Variant.Text);
                builder.AddAttribute(++seq, "InnerPadding", false);
                builder.AddAttribute(++seq, "Class", "mb-4");
                builder.AddAttribute(++seq, "ChildContent", (RenderFragment)((builder2) => {
                    builder2.AddContent(++seq, Value);
                }));
                builder.CloseComponent();
            }
            else
            {
                builder.OpenComponent(++seq, typeof(MudText));
                builder.AddAttribute(++seq, "Typo", Typo.h6);
                builder.AddAttribute(++seq, "ChildContent", (RenderFragment)((builder2) => {
                    builder2.AddContent(++seq, Value);
                }));
                builder.CloseComponent();
            }
        }
    };



    //
    //
    // SHOPPING CART DRAWER
    private ShoppingCartViMo ShoppingCart { get; set; }
    private MerchantViMo Merchant { get; set; }

    private bool OpenShopCartDrawer { get; set; }


    /// <summary>
    /// Creates a string explaining the value of money in the time a simple worker
    /// needs to make that amount.
    /// </summary>
    /// <param name="Money">Money in Silverthalers</param>
    /// <returns>An explanatory localized string</returns>
    protected string ExplainTheValueofMoney(decimal Money)
    {
        var Time = MoneyToWage.TimeToEarn(LaborClass.Simple, Money);
        string ms = Time.months == 1 ? "shopMonth" : "shopMonths";
        ms = l10n[ms];
        string ds = Time.days == 1 ? "shopDay" : "shopDays";
        ds = l10n[ds];

        if (Time.years > 0)
        {
            string ys = Time.years == 1 ? "shopYear" : "shopYears";
            ys = l10n[ys];
            if (Time.months <= 1)
                return string.Format(l10n["txtMoneyValue1"], Time.years, ys);
            else
                return string.Format(l10n["txtMoneyValue2"], Time.years, ys, Time.months, ms);
        }
        else if (Time.months > 0)
            return string.Format(l10n["txtMoneyValue1"], Time.months, ms);
        else
            return string.Format(l10n["txtMoneyValue1"], Time.days, ds);
    }
    
}
