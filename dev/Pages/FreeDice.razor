@page "/freedice"
@using FateExplorer.Components
@using FateExplorer.FreeDiceCupViMo

@inject IDialogService DialogService
@inject IStringLocalizer<App> l10n


<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@l10n["Roll Free Dice"]</MudText>
    <MudGrid Spacing="4" Class="mt-16">
        <MudItem xs="4">
            <MudText Typo="Typo.h5" GutterBottom=true>@l10n["lblSelection"]</MudText>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined=true>
                <MudList Clickable="true">
                    <MudListSubheader>@l10n["Dice Cups"]</MudListSubheader>
                    @foreach(var Cup in DiceCups.CupList)
                    {
                    @*<MudListItem Avatar=@GetCupIcon(Cup) IconColor=@GetCupColor(Cup) OnClick=@(() => OnCupClicked(Cup))>*@
                    <MudListItem IconColor=Color.Error OnClick=@(() => OnCupClicked(Cup))> @*Avatar=Icons.Material.Filled.Widgets *@
                        <div class="d-flex">
                            <AvatarDiceCup DieSides=@Cup.Sides Class="mr-4" />
                            <MudText>@Cup.Name</MudText>
                            <MudText Class="ml-auto">@Cup.Description</MudText>
                        </div>
                    </MudListItem>
                    }
                </MudList>
                <MudButton OnClick=@OpenAddDlg Variant="Variant.Outlined" Color="Color.Primary" FullWidth=true Class="rounded-t rounded-br">
                    @l10n["Add Dice Cup"] ...
                </MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="8">
            <MudText Typo="Typo.h5" GutterBottom=true>@l10n["Roll Results"]</MudText>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined=true>
                @*<RollResultCard Name="Ability Roll / d20 Roll" />*@
                @if (DiceCups.CupRollResults is not null)
                    @foreach(var r in DiceCupHolderViMo.ReverseResults(DiceCups.CupRollResults))
                    {
                        <RollResultCard Name=@r.Name RollResult=@r />
                    }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
@*                    <MudListItem Icon="@Icons.Material.Filled.ContentCut">
                        <div class="d-flex">
                            <MudText>Any Single Die</MudText>
                            <MudText Inline="true" Class="ml-auto">1dX</MudText>
                        </div>
                    </MudListItem>*@





@code {
    // DIALOG: Add new dice cup
    private DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true, FullScreen = true };
    private async Task OpenAddDlg()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<DlgFreeDiceCup>(l10n[""], options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DiceCupViMo NewDiceCup = result.Data as DiceCupViMo;
            if (NewDiceCup is not null)
                DiceCups.AddCup(NewDiceCup);
        }
    }



    // PAGE
    private DiceCupHolderViMo DiceCups = new();

    protected override void OnInitialized()
    {
        if (DiceCups is null) DiceCups = new();
    }



    #region interaction // ==========================================

    private void OnCupClicked(DiceCupViMo Cup)
    {
        DiceCups.RollCup(Cup);
    }

    #endregion



    #region display // ==============================================

    private string GetCupIcon(DiceCupViMo Cup)
    {
        switch(Cup.Type)
        {
            case CupType.Single: return Cup.Sides.ToString();
            case CupType.Multi: return Cup.Sides.ToString();
            case CupType.MixedMulti: return Icons.Material.Filled.Widgets;
            default: return Icons.Material.Filled.QuestionAnswer;
        }
    }

    private MudBlazor.Color GetCupColor(DiceCupViMo Cup)
    {
        if (Cup.FactoryDefault)
            return Color.Error;
        else
            return Color.Info;
    }

    #endregion
}
